/*
 *     Generated by class-dump 3.1.
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2005 by Steve Nygard.
 */

struct AliasRecord;

struct CGContext;

struct CGFunction;

struct CGImage;

struct CGLayer;

struct CGPoint {
    float _field1;
    float _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    float _field1;
    float _field2;
};

struct FSRef {
    unsigned char _field1[80];
};

struct IconFamilyResource;

struct OpaqueEventHandlerRef;

struct OpaqueEventHotKeyRef;

struct OpaqueEventRef;

struct OpaqueKeyboardLayoutRef;

struct UCKeyboardLayout {
    unsigned short _field1;
    unsigned short _field2;
    unsigned int _field3;
    unsigned int _field4;
    struct UCKeyboardTypeHeader _field5[1];
};

struct UCKeyboardTypeHeader {
    unsigned int keyboardTypeFirst;
    unsigned int keyboardTypeLast;
    unsigned int keyModifiersToTableNumOffset;
    unsigned int keyToCharTableIndexOffset;
    unsigned int keyStateRecordsIndexOffset;
    unsigned int keyStateTerminatorsOffset;
    unsigned int keySequenceDataIndexOffset;
};

struct _CGDirectDisplayID;

struct _NSPoint {
    float x;
    float y;
};

struct _NSRange {
    unsigned int _field1;
    unsigned int _field2;
};

struct _NSRect {
    struct _NSPoint origin;
    struct _NSSize size;
};

struct _NSSize {
    float width;
    float height;
};

struct _NSZone;

struct _TSGradientElement {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
    struct _TSGradientElement *_field6;
};

struct __gFlags {
    unsigned int drawsFill:1;
    unsigned int drawsStroke:1;
    unsigned int manipulatingBounds:1;
    unsigned int repositioningBounds:1;
    unsigned int _pad:29;
};

struct __gvFlags {
    unsigned int rubberbandIsDeselecting:1;
    unsigned int initedRulers:1;
    unsigned int snapsToGrid:1;
    unsigned int showsGrid:1;
    unsigned int knobsHidden:1;
    unsigned int _pad:27;
};

struct __lvFlags {
    unsigned int rubberbandIsDeselecting:1;
    unsigned int initedRulers:1;
    unsigned int snapsToGrid:1;
    unsigned int showsGrid:1;
    unsigned int knobsHidden:1;
    unsigned int _pad:27;
};

/*
 * File: /Applications/Acorn beta.app/Contents/MacOS/Acorn
 * Arch: PowerPC (ppc)
 */

@protocol NSCoding
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)fp8;
@end

@protocol SubviewTableViewControllerDataSourceProtocol
- (id)tableView:(id)fp8 viewForRow:(int)fp12;
@end

@interface TSCircle : TSGraphic
{
}

- (id)bezierPath;
- (void)makeNaturalSize;
- (BOOL)shouldKeepAspectRatioWhenShiftIsHeld;

@end

@interface NSObject (TSPerformExtras)
- (void)performSelector:(SEL)fp8 withEachObjectInArray:(id)fp12;
- (void)performSelector:(SEL)fp8 withEachObjectInSet:(id)fp12;
@end

@interface TSGraphic : NSObject <NSCopying>
{
    NSMutableDictionary *configContextInfo;
    NSPanel *configPanel;
    NSTextField *configPanelWidth;
    NSTextField *configPanelHeight;
    NSTextField *configPanelOther;
    NSTextField *configPanelOtherLabel;
    struct _NSRect _bounds;
    struct _NSRect _origBounds;
    float _lineWidth;
    NSColor *_fillColor;
    NSColor *_strokeColor;
    struct __gFlags _gFlags;
    NSColor *borderColor;
    BOOL _canHaveArrows;
    BOOL _hasShadow;
    float _shadowBlurRadius;
    NSString *_startArrowImageName;
    NSImage *_startArrowImage;
    NSString *_endArrowImageName;
    NSImage *_endArrowImage;
    float _startArrowScale;
    float _endArrowScale;
    TSDocument *_document;
    TSShapeLayer *_layer;
    int _compositingMode;
    struct _NSSize _shadowOffset;
    BOOL _hasCornerRadius;
    float _cornerRadius;
}

+ (int)flipKnob:(int)fp8 horizontal:(BOOL)fp12;
+ (id)graphicWithPropertyListRepresentation:(id)fp8;
+ (id)creationCursor;
- (id)init;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)undoManager;
- (id)graphicType;
- (void)didChange;
- (void)setBounds:(struct _NSRect)fp8;
- (void)scaleSize:(float)fp8;
- (void)scaleXBy:(float)fp8 yBy:(float)fp12;
- (struct _NSRect)bounds;
- (float)width;
- (float)height;
- (float)x;
- (float)y;
- (struct _NSRect)clippingBounds;
- (void)setHasShadow:(BOOL)fp8;
- (float)shadowOffsetX;
- (float)shadowOffsetY;
- (void)setShadowOffsetY:(float)fp8;
- (void)setShadowOffsetX:(float)fp8;
- (void)setShadowOffset:(struct _NSSize)fp8;
- (float)shadowBlurRadius;
- (void)setShadowBlurRadius:(float)fp8;
- (void)setDrawsFill:(BOOL)fp8;
- (BOOL)drawsFill;
- (void)setFillColor:(id)fp8;
- (id)fillColor;
- (void)setDrawsStroke:(BOOL)fp8;
- (BOOL)drawsStroke;
- (void)setStrokeColor:(id)fp8;
- (id)strokeColor;
- (void)setStrokeLineWidth:(float)fp8;
- (float)strokeLineWidth;
- (BOOL)shouldSnapToGrid;
- (BOOL)drawsSinglePoint;
- (void)startBoundsManipulation;
- (void)stopBoundsManipulation;
- (struct _NSRect)originalBounds;
- (void)startCreationManipulation;
- (void)stopCreationManipulation;
- (BOOL)isRepositioningBounds;
- (BOOL)isManipulatingBounds;
- (void)startRepositioningBounds;
- (void)stopRepositioningBounds;
- (void)moveBy:(struct _NSPoint)fp8;
- (void)flipHorizontally;
- (void)flipVertically;
- (BOOL)shouldKeepAspectRatioWhenShiftIsHeld;
- (struct _NSRect)reshapeBoundsKeepingAspectRatioIfNeeded:(struct _NSRect)fp8 withEvent:(id)fp24 usingKnob:(int)fp28 toPoint:(struct _NSPoint)fp32;
- (int)resizeByMovingKnob:(int)fp8 toPoint:(struct _NSPoint)fp12 withEvent:(id)fp20;
- (void)makeNaturalSize;
- (BOOL)canDrawStroke;
- (BOOL)canDrawFill;
- (BOOL)hasNaturalSize;
- (BOOL)canHaveCornerRadius;
- (BOOL)hasCornerRadius;
- (void)setHasCornerRadius:(BOOL)fp8;
- (float)cornerRadius;
- (void)setCornerRadius:(float)fp8;
- (id)propertyListRepresentation;
- (void)loadPropertyListRepresentation:(id)fp8;
- (void)takeValuesFromGraphic:(id)fp8;
- (struct _NSRect)drawingBoundsWithShadow:(BOOL)fp8;
- (struct _NSRect)drawingBounds;
- (id)bezierPath;
- (void)drawInView:(id)fp8 isSelected:(BOOL)fp12;
- (unsigned int)knobMask;
- (int)knobUnderPoint:(struct _NSPoint)fp8;
- (void)drawHandleAtPoint:(struct _NSPoint)fp8 inView:(id)fp16;
- (struct _NSRect)boundsForHandles;
- (void)drawHandlesInView:(id)fp8;
- (void)drawHandlesInView:(id)fp8 drawRect:(BOOL)fp12;
- (id)borderColor;
- (void)setBorderColor:(id)fp8;
- (struct _NSPoint)startPoint;
- (void)setStartPoint:(struct _NSPoint)fp8;
- (BOOL)createWithEvent:(id)fp8 inView:(id)fp12;
- (void)configureSingleClickConfigurePanel;
- (void)pullValuesFromConfigurePanel;
- (void)endSingleClickConfigurePanel:(id)fp8;
- (id)singleClickConfigurePanel;
- (BOOL)isImage;
- (void)setCompositingMode:(int)fp8;
- (BOOL)isEditable;
- (BOOL)isLocked;
- (void)startEditingWithEvent:(id)fp8 inView:(id)fp12;
- (void)endEditingInView:(id)fp8;
- (BOOL)hitTest:(struct _NSPoint)fp8 isSelected:(BOOL)fp16;
- (BOOL)startPoint:(struct _NSPoint)fp8 endPoint:(struct _NSPoint)fp16 fallsInPath:(id)fp24;
- (BOOL)fallsInPath:(id)fp8;
- (id)xdescription;
- (id)objectSpecifier;
- (float)xPosition;
- (void)setXPosition:(float)fp8;
- (float)yPosition;
- (void)setYPosition:(float)fp8;
- (void)setWidth:(float)fp8;
- (void)setHeight:(float)fp8;
- (BOOL)canHaveArrows;
- (void)setCanHaveArrows:(BOOL)fp8;
- (BOOL)hasShadow;
- (id)startArrowImageName;
- (void)setStartArrowImageName:(id)fp8;
- (id)startArrowImage;
- (void)setStartArrowImage:(id)fp8;
- (id)endArrowImageName;
- (void)setEndArrowImageName:(id)fp8;
- (id)endArrowImage;
- (void)setEndArrowImage:(id)fp8;
- (float)startArrowScale;
- (void)setStartArrowScale:(float)fp8;
- (float)endArrowScale;
- (void)setEndArrowScale:(float)fp8;
- (id)document;
- (void)setDocument:(id)fp8;
- (id)layer;
- (void)setLayer:(id)fp8;
- (int)compositingMode;
- (struct _NSSize)shadowOffset;
- (void)didResizeToScale:(float)fp8;

@end

@interface TSGraphicView : NSView
{
    struct __gvFlags _gvFlags;
    TSGraphic *_editingGraphic;
    TSTextView *_editorView;
    float _gridSpacing;
    NSColor *_gridColor;
    struct _NSRect _verticalRulerLineRect;
    struct _NSRect _horizontalRulerLineRect;
    TSWindowController *_drawWindowController;
    float _scale;
    NSString *_scaleFactor;
    struct _NSRect _zoomRect;
    struct _NSRect _cropRect;
    NSTimer *_selectionTimer;
    int _slectionAnimationState;
    NSBezierPath *_movingSelectionPath;
    TSSelectionMask *_selectionMaskLayer;
    BOOL _hasSelection;
    BOOL _hideSelection;
    struct CGContext *_drawContext;
    struct CGLayer *_drawLayerRef;
    BOOL _layerRefDrawing;
    NSImage *_previewScaleImage;
    BOOL _drawRotatePreview;
    float _rotatePreviewAngle;
    CIImage *_rotatePreview;
    CIImage *_preRotateImage;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)updateView:(id)fp8;
- (id)drawDocument;
- (BOOL)isFlipped;
- (BOOL)acceptsFirstResponder;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (BOOL)becomeFirstResponder;
- (void)setNeedsDisplayInRect:(struct _NSRect)fp8;
- (void)drawBackgroundInRect:(struct _NSRect)fp8;
- (struct _NSSize)maxInscribedRectWithRatio:(float)fp8 inRectWithSize:(struct _NSSize)fp12;
- (void)drawWatermarkIn:(struct CGContext *)fp8 withRect:(struct CGRect)fp12;
- (void)drawRect:(struct _NSRect)fp8;
- (void)beginEchoingMoveToRulers:(struct _NSRect)fp8;
- (void)continueEchoingMoveToRulers:(struct _NSRect)fp8;
- (void)stopEchoingMoveToRulers;
- (BOOL)layerInvisibleAltert;
- (void)mouseMoved:(id)fp8;
- (void)grabTheCurrentColorUnderMouseInScreen:(id)fp8;
- (void)grabTheCurrentColorUnderMouseInSelectedLayer:(id)fp8;
- (id)layerToClickThroughUnderPointFromEvent:(id)fp8 ofClass:(Class)fp12;
- (BOOL)selectedToolIsShapeLayerTool;
- (void)startDragAndDropForEvent:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)scrollWheel:(id)fp8;
- (unsigned int)dragOperationForDraggingInfo:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (void)concludeDragOperation:(id)fp8;
- (void)updateRulers;
- (BOOL)rulerView:(id)fp8 shouldMoveMarker:(id)fp12;
- (float)rulerView:(id)fp8 willMoveMarker:(id)fp12 toLocation:(float)fp16;
- (void)rulerView:(id)fp8 didMoveMarker:(id)fp12;
- (BOOL)rulerView:(id)fp8 shouldRemoveMarker:(id)fp12;
- (void)toggleRuler:(id)fp8;
- (void)clearSelection:(id)fp8;
- (void)deleteAll:(id)fp8;
- (void)updateSize;
- (void)gridSheetDidClose:(id)fp8;
- (void)showGridSheet:(id)fp8;
- (void)snapsToGridMenuAction:(id)fp8;
- (void)showsGridMenuAction:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (void)nudgeSelectionByDelta:(struct _NSPoint)fp8;
- (BOOL)nudgeSelectionWithEvent:(id)fp8;
- (void)beginMovingSelectionWithMouse:(id)fp8;
- (void)nudgeMarqueByDelta:(struct _NSPoint)fp8;
- (BOOL)nudgeMarqueWithEvent:(id)fp8;
- (void)beginMovingMarqueWithMouse:(id)fp8;
- (void)beginHandScrollWithEvent:(id)fp8;
- (void)keyDown:(id)fp8;
- (void)insertText:(id)fp8;
- (void)deleteForward:(id)fp8;
- (void)deleteBackward:(id)fp8;
- (BOOL)snapsToGrid;
- (void)setSnapsToGrid:(BOOL)fp8;
- (BOOL)showsGrid;
- (void)setShowsGrid:(BOOL)fp8;
- (float)gridSpacing;
- (void)setGridSpacing:(float)fp8;
- (id)gridColor;
- (void)setGridColor:(id)fp8;
- (BOOL)respondsToSelector:(SEL)fp8;
- (void)forwardInvocation:(id)fp8;
- (id)methodSignatureForSelector:(SEL)fp8;
- (void)makeFreeSelectionWithEvent:(id)fp8;
- (void)startSelectionAnimation;
- (void)animateSelection:(id)fp8;
- (void)updateCursorRectsForRectSelection;
- (void)makeZoomSelectionWithEvent:(id)fp8;
- (void)placeBezierPathOnMask:(id)fp8;
- (void)makeEllipticalSelectionWithEvent:(id)fp8;
- (void)makeRectSelectionWithEvent:(id)fp8;
- (void)makeMagicWandSelectionWithEvent:(id)fp8;
- (void)setHasSelection:(BOOL)fp8;
- (BOOL)hasSelection;
- (BOOL)hideSelection;
- (void)setHideSelection:(BOOL)fp8;
- (void)toggleHideSelection:(id)fp8;
- (struct _NSRect)selectionBounds;
- (void)awakeFromNib;
- (float)scale;
- (void)setScale:(float)fp8;
- (id)scaleFactor;
- (void)setScaleFactor:(id)fp8;
- (void)updateCursors;
- (void)resetCursorRects;
- (void)makeSelectionToRatio:(struct _NSSize)fp8;
- (void)constrainSelection:(id)fp8;
- (void)selectClosestBitmapLayer;
- (void)selectAndEditClosestShapeLayerWithEvent:(id)fp8;
- (void)commitDelta:(id)fp8;
- (void)changeColor:(id)fp8;
- (BOOL)isOpaque;
- (void)changeAttributes:(id)fp8;
- (void)changeFont:(id)fp8;
- (void)showAccelerator:(id)fp8;
- (void)flagsChanged:(id)fp8;
- (id)activeLayer;
- (id)drawWindowController;
- (void)setDrawWindowController:(id)fp8;
- (void)documentWasSet;
- (struct _NSRect)cropRect;
- (void)setCropRect:(struct _NSRect)fp8;
- (id)movingSelectionPath;
- (void)setMovingSelectionPath:(id)fp8;
- (struct _NSRect)zoomRect;
- (void)setZoomRect:(struct _NSRect)fp8;
- (id)selectionTimer;
- (void)setSelectionTimer:(id)fp8;
- (int)slectionAnimationState;
- (void)setSlectionAnimationState:(int)fp8;
- (id)selectionMaskLayer;
- (void)setSelectionMaskLayer:(id)fp8;
- (void)documentDidScaleXBy:(float)fp8 yBy:(float)fp12;
- (void)canvasDidResize;
- (void)clearMaskLayer;
- (struct CGImage *)selectionMask;
- (struct CGContext *)selectionMaskContext;
- (void)clipSelectionInContext:(struct CGContext *)fp8;
- (void)invertSelection:(id)fp8;
- (void)featherSelection:(id)fp8;
- (id)outlineColorForClipView;
- (id)editorView;
- (id)menuForEvent:(id)fp8;
- (void)fsdebug:(id)fp8;
- (void)rotateCanvas:(float)fp8;
- (void)rotateCanvasRight:(id)fp8;
- (void)rotateCanvasLeft:(id)fp8;
- (id)previewScaleImage;
- (void)setPreviewScaleImage:(id)fp8;
- (struct CGContext *)drawContext;
- (void)setDrawContext:(struct CGContext *)fp8;

@end

@interface TSGridPanelController : NSWindowController
{
    TSGraphicView *inspectingGraphicView;
}

+ (id)gridPanelControllerWithGraphicView:(id)fp8;
- (id)windowNibName;
- (void)dealloc;
- (void)openSheet;
- (void)closeSheet:(id)fp8;
- (id)inspectingGraphicView;
- (void)setInspectingGraphicView:(id)fp8;

@end

@interface TSLine : TSGraphic
{
    struct _NSPoint _originalStartPoint;
    struct _NSPoint _originalEndPoint;
    struct _NSPoint _startPoint;
    BOOL _startsAtLowerLeft;
    BOOL _startedMoving;
    BOOL _movingStart;
}

- (id)init;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)dealloc;
- (void)setStartsAtLowerLeft:(BOOL)fp8;
- (void)flipHorizontally;
- (void)flipVertically;
- (BOOL)drawsFill;
- (BOOL)canDrawFill;
- (BOOL)drawsStroke;
- (BOOL)hasNaturalSize;
- (BOOL)canHaveArrows;
- (void)drawArrowInView:(id)fp8 withPath:(id)fp12 atPoint:(struct _NSPoint)fp16 angle:(float)fp24 isStart:(BOOL)fp28;
- (struct _NSPoint)endPointFromBounds:(struct _NSRect)fp8;
- (struct _NSPoint)endPoint;
- (void)drawInView:(id)fp8 isSelected:(BOOL)fp12;
- (struct _NSRect)drawingBounds;
- (struct _NSRect)clippingBounds;
- (struct _NSPoint)subtractPointForArrow:(struct _NSPoint)fp8 angle:(float)fp16 mult:(BOOL)fp20;
- (id)bezierPath;
- (unsigned int)knobMask;
- (BOOL)hitTest:(struct _NSPoint)fp8 isSelected:(BOOL)fp16;
- (void)startBoundsManipulation;
- (void)stopBoundsManipulation;
- (int)knobForStartPoint:(struct _NSPoint)fp8;
- (struct _NSPoint)pointForKnob:(int)fp8 inRect:(struct _NSRect)fp12;
- (void)setStartPoint:(struct _NSPoint)fp8;
- (void)setBounds:(struct _NSRect)fp8;
- (int)resizeByMovingKnob:(int)fp8 toPoint:(struct _NSPoint)fp12 withEvent:(id)fp20;
- (id)propertyListRepresentation;
- (void)loadPropertyListRepresentation:(id)fp8;
- (id)singleClickConfigurePanel;
- (struct _NSPoint)originalStartPoint;
- (void)setOriginalStartPoint:(struct _NSPoint)fp8;
- (struct _NSPoint)startPoint;
- (BOOL)startsAtLowerLeft;
- (BOOL)startedMoving;
- (void)setStartedMoving:(BOOL)fp8;
- (BOOL)movingStart;
- (void)setMovingStart:(BOOL)fp8;
- (void)scaleXBy:(float)fp8 yBy:(float)fp12;
- (BOOL)fallsInPath:(id)fp8;

@end

@interface TSRectangle : TSGraphic
{
}

- (id)bezierPath;
- (void)makeNaturalSize;
- (BOOL)shouldKeepAspectRatioWhenShiftIsHeld;
- (BOOL)canHaveCornerRadius;

@end

@interface TSRenderingView : NSView
{
    BOOL _transparentBackground;
    TSDocument *_document;
    NSArray *_graphics;
}

- (id)initWithFrame:(struct _NSRect)fp8 document:(id)fp24;
- (id)initWithFrame:(struct _NSRect)fp8 graphics:(id)fp24;
- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)isOpaque;
- (BOOL)isFlipped;
- (BOOL)transparentBackground;
- (void)setTransparentBackground:(BOOL)fp8;
- (id)document;
- (void)setDocument:(id)fp8;
- (id)graphics;
- (void)setGraphics:(id)fp8;

@end

@interface TSTextArea : TSGraphic
{
    NSColor *_junkFillColor;
    NSTextStorage *_contents;
    BOOL _keepBoundsWhenEditing;
}

- (id)init;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)setContents:(id)fp8;
- (id)coerceValueForContents:(id)fp8;
- (void)TS_contentsChanged:(id)fp8;
- (BOOL)drawsStroke;
- (BOOL)canDrawFill;
- (BOOL)drawsFill;
- (BOOL)canDrawStroke;
- (void)flipShadow;
- (void)drawInView:(id)fp8 isSelected:(BOOL)fp12;
- (struct _NSSize)minSize;
- (struct _NSSize)maxSize;
- (struct _NSSize)requiredSize:(float)fp8;
- (void)makeNaturalSize;
- (void)sizeBoxToFit;
- (void)setBounds:(struct _NSRect)fp8;
- (int)resizeByMovingKnob:(int)fp8 toPoint:(struct _NSPoint)fp12 withEvent:(id)fp20;
- (BOOL)isEditable;
- (void)scaleEditor:(id)fp8 toGraphicView:(id)fp12;
- (void)graphicViewScaleDidChange:(id)fp8;
- (void)textSelectionChanged:(id)fp8;
- (void)startEditingWithEvent:(id)fp8 inView:(id)fp12;
- (void)endEditingInView:(id)fp8;
- (void)textDidChange:(id)fp8;
- (id)propertyListRepresentation;
- (void)loadPropertyListRepresentation:(id)fp8;
- (BOOL)shouldKeepAspectRatioWhenShiftIsHeld;
- (id)fillColor;
- (void)setFillColor:(id)fp8;
- (void)setAlignment:(int)fp8;
- (id)junkFillColor;
- (void)setJunkFillColor:(id)fp8;
- (id)contents;
- (void)fmReplaceCharactersInRange:(struct _NSRange)fp8 withAttributedString:(id)fp16;
- (void)scaleText:(float)fp8;
- (void)scaleXBy:(float)fp8 yBy:(float)fp12;
- (void)didResizeToScale:(float)fp8;
- (unsigned int)countOfWrappedLines;
- (void)widdenToFitCountOfLines:(unsigned int)fp8;
- (BOOL)keepBoundsWhenEditing;
- (void)setKeepBoundsWhenEditing:(BOOL)fp8;

@end

@interface TSDrawWindow : NSWindow
{
    NSButton *_purchaseButton;
}

- (id)initWithContentRect:(struct _NSRect)fp8 styleMask:(unsigned int)fp24 backing:(int)fp28 defer:(BOOL)fp32;
- (void)awakeFromNib;
- (void)removePurchaseButton:(id)fp8;
- (void)addPurchaseButton;
- (void)setupStuff;
- (struct _NSRect)constrainFrameRect:(struct _NSRect)fp8 toScreen:(id)fp24;

@end

@interface TSFreehand : TSGraphic
{
    BOOL _startsAtLowerLeft;
    struct _NSPoint lastPoint;
    BOOL shouldDraw;
    NSBezierPath *_path;
}

- (id)init;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)setStartsAtLowerLeft:(BOOL)fp8;
- (BOOL)startsAtLowerLeft;
- (void)flipHorizontally;
- (void)flipVertically;
- (BOOL)drawsFill;
- (BOOL)canDrawFill;
- (BOOL)drawsStroke;
- (BOOL)hasNaturalSize;
- (id)bezierPath;
- (void)stopCreationManipulation;
- (void)drawInView:(id)fp8 isSelected:(BOOL)fp12;
- (int)resizeByMovingKnob:(int)fp8 toPoint:(struct _NSPoint)fp12 withEvent:(id)fp20;
- (id)propertyListRepresentation;
- (void)loadPropertyListRepresentation:(id)fp8;
- (void)moveBy:(struct _NSPoint)fp8;
- (struct _NSRect)bounds;
- (void)setBounds:(struct _NSRect)fp8;
- (unsigned int)knobMask;
- (BOOL)shouldSnapToGrid;
- (id)singleClickConfigurePanel;
- (BOOL)drawsSinglePoint;
- (struct _NSRect)boundsForHandles;
- (id)path;
- (void)setPath:(id)fp8;

@end

@interface TSPreferencesWindowController : NSWindowController
{
    NSTextField *hotKeyDescriptionField;
    NSTextField *fullScreenHotKeyDescriptionField;
    NSButton *showInDock;
    NSTextField *showInDockWarning;
    NSView *generalPrefsView;
    NSView *hotkeyPrefsView;
    NSView *advancedPrefsView;
    BOOL inSheet;
    NSMutableDictionary *_toolbarItems;
}

+ (id)sharedPreferencesController;
- (void)awakeFromNib;
- (void)swapShowInDockPref:(id)fp8;
- (void)updatePrefs;
- (void)hotKeySheetDidEndWithReturnCode:(id)fp8;
- (void)hitSetHotKey:(id)fp8;
- (void)hitSetFullScreenHotKey:(id)fp8;
- (void)loadPrefsView:(id)fp8;
- (void)loadGeneralPrefs:(id)fp8;
- (void)loadHotkeyPrefs:(id)fp8;
- (void)loadAdvancedPrefs:(id)fp8;
- (void)loadToolbar;
- (id)toolbar:(id)fp8 itemForItemIdentifier:(id)fp12 willBeInsertedIntoToolbar:(BOOL)fp16;
- (id)toolbarAllowedItemIdentifiers:(id)fp8;
- (id)toolbarDefaultItemIdentifiers:(id)fp8;
- (id)toolbarSelectableItemIdentifiers:(id)fp8;
- (void)show;

@end

@interface TSApplication : NSApplication
{
    struct OpaqueEventHandlerRef *mProxEventHandlerRef;
    BOOL _shouldActivate;
}

- (id)init;
- (void)dealloc;
- (void)sendEvent:(id)fp8;
- (void)tabletProximity:(id)fp8;
- (id)workflowScriptsFolder;
- (id)textStylesFolder;
- (id)acornPicturesFolder;
- (id)applicationSupportFolder;
- (void)orderFrontStandardAboutPanel:(id)fp8;
- (int)requestUserAttention:(int)fp8;
- (id)validRequestorForSendType:(id)fp8 returnType:(id)fp12;
- (BOOL)writeSelectionToPasteboard:(id)fp8 types:(id)fp12;
- (BOOL)shouldActivate;
- (void)setShouldActivate:(BOOL)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (void)orderFrontFontPanel:(id)fp8;
- (BOOL)isInFullScreenEditingMode;

@end

@interface TSScreenCapture : NSObject
{
    NSImage *_screenCapture;
    char *_screenBytes;
    struct _CGDirectDisplayID *displayId;
    struct _NSRect frame;
}

- (struct _CGDirectDisplayID *)displayId;
- (void)setDisplayId:(struct _CGDirectDisplayID *)fp8;
- (struct _NSRect)frame;
- (void)setFrame:(struct _NSRect)fp8;
- (void)captureFrame:(struct _NSRect)fp8 inScreen:(id)fp24;
- (void)captureFrame:(struct _NSRect)fp8 inDisplay:(struct _CGDirectDisplayID *)fp24;
- (id)image;
- (void)setScreenCapture:(id)fp8;
- (id)imageFromMainScreen;
- (void)dealloc;
- (id)makeNSImageFromScreenRect16:(struct _NSRect)fp8 inDisplay:(struct _CGDirectDisplayID *)fp24;
- (id)imageFromRect:(struct _NSRect)fp8 inDisplay:(struct _CGDirectDisplayID *)fp24;

@end

@interface TSScreenCapture (Private)
- (id)sixteenBitMakeNSImageFromDisplay:(struct _CGDirectDisplayID *)fp8;
@end

@interface TSHighlight : TSFreehand
{
}

- (id)init;

@end

@interface TSSmoothCurve : NSObject
{
    NSColor *color;
    int tag;
    double fDataXRange;
    double fDataYRange;
    double fThreshold;
    NSAffineTransform *fTransform;
    struct _NSPoint O[3];
    struct _NSPoint firstCP;
    struct _NSPoint B[2];
    struct _NSPoint Z;
    struct _NSPoint X;
    struct _NSPoint maxPoint;
    struct _NSPoint minPoint;
    int pointCount;
    BOOL complete;
    NSBezierPath *path;
    struct _NSPoint startPoint;
}

- (id)init;
- (void)setStartPoint:(struct _NSPoint)fp8;
- (void)resetPointMachine;
- (void)addPoint:(struct _NSPoint)fp8;
- (void)dealloc;
- (int)tag;
- (void)setTag:(int)fp8;
- (void)setColor:(id)fp8;
- (id)color;
- (void)clear;
- (void)stroke;
- (struct _NSPoint)segmentCenter;
- (void)closePath;
- (struct _NSRect)bounds;
- (id)path;
- (void)setPath:(id)fp8;
- (void)setLineWidth:(float)fp8;

@end

@interface NSMutableString (FMStringAdditions)
- (void)normalizeStringEndings;
- (void)normalizeStringEndingsInRange:(struct _NSRange)fp8;
@end

@interface NSString (FMStringAdditions)
- (BOOL)hasSuffixFromArray:(id)fp8;
- (id)commonPathPrefixWithString:(id)fp8;
- (id)escapeForHTMLString;
- (int)numberOfOcurrencesOfChar:(BOOL)fp8;
- (id)trim;
- (id)fmStringByAddingPercentEscapesb;
- (id)fmStringByAddingPercentEscapes;
- (id)fmFilenameFriendlyString;
- (id)fmGetRTFDWithDefaultFont:(id)fp8;
- (id)paragraphsForRange:(struct _NSRange)fp8;
- (int)countOfWhitespacePrefixCharacters;
- (long)pathToFSRef:(struct FSRef *)fp8;
- (id)stringByRunningShellScript:(id)fp8;
- (id)stringByResolvingFinderAlias;
@end

@interface TSDrawer : NSDrawer
{
}

@end

@interface TSClickAwayView : NSImageView
{
}

- (void)mouseDown:(id)fp8;

@end

@interface TSAppDelegate : NSResponder
{
    PTHotKey *fsmHotKey;
    NSMenu *statusMenu;
    BOOL performingCommandImageDrag;
    int windowActive;
    NSMenuItem *purchaseMenu;
    NSPanel *regPanel;
    NSTextField *regName;
    NSTextField *regSerial;
    NSDictionary *xatts;
    NSMenuItem *flickrUploaderMenuItem;
    NSMenuItem *flickrSpaceMenuItem;
    NSMenuItem *sanityMenu;
    NSMenuItem *_filterMenu;
    NSMenuItem *_workspaceMenu;
    NSMenuItem *_actionsMenu;
    NSMenuItem *_saveACopyMenuItem;
    NSMenuItem *_textStyleMenuItem;
    NSMenuItem *_selectColorMenuItem;
    TSToolPaletteController *_toolPaletteController;
    TSIntroWindowController *_introWindowController;
    SUUpdater *_updater;
    BOOL _applicationIsSetup;
}

+ (void)setupDefaults;
+ (void)initialize;
- (void)dealloc;
- (id)init;
- (void)awakeFromNib;
- (BOOL)applicationShouldOpenUntitledFile:(id)fp8;
- (void)installStatusMenu;
- (void)statusMenuHit:(id)fp8;
- (void)startupDebug;
- (void)showNewDocumentController:(id)fp8;
- (void)kqueue:(id)fp8 receivedNotification:(id)fp12 forFile:(id)fp16;
- (void)startWatchingWorkflowScriptsFolder;
- (void)movePalettesToDefaultLocations:(id)fp8;
- (void)applicationDidFinishLaunching:(id)fp8;
- (void)applicationWillTerminate:(id)fp8;
- (void)installTextStyles;
- (void)installActionScripts;
- (void)actionScriptsDidChange:(id)fp8;
- (void)showWindowScreenShot:(id)fp8;
- (void)takeFullScreenShot:(id)fp8;
- (void)fullScreenWindowController:(id)fp8 tookScreenShot:(id)fp12 inFrame:(struct _NSRect)fp16;
- (void)fullScreenWindowControllerDidCancel:(id)fp8;
- (id)fullScreenShotHotKey;
- (void)showToolPaletteAction:(id)fp8;
- (void)showPreferencesPanelAction:(id)fp8;
- (void)copyWorkflowScripts;
- (void)copyTextStyles;
- (void)checkClicked;
- (void)showIntroductionAction:(id)fp8;
- (void)webView:(id)fp8 decidePolicyForNavigationAction:(id)fp12 request:(id)fp16 frame:(id)fp20 decisionListener:(id)fp24;
- (id)xatts;
- (void)setXatts:(id)fp8;
- (void)regCheck:(id)fp8;
- (void)purchaseOnlineAction:(id)fp8;
- (void)openRegisterPanelAction:(id)fp8;
- (void)registerAction:(id)fp8;
- (void)handleXAcornRegOpenURLAppleEvent:(id)fp8;
- (void)handleOpenURLAppleEvent:(id)fp8 withReplyEvent:(id)fp12;
- (BOOL)isWindowActive;
- (void)xcheckWindowActive;
- (void)checkWindowActive;
- (BOOL)performingCommandImageDrag;
- (void)setPerformingCommandImageDrag:(BOOL)fp8;
- (void)reportABug:(id)fp8;
- (void)openFMWebsite:(id)fp8;
- (void)newDocumentFromClipboard:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (void)showToolsPalette:(id)fp8;
- (void)showDetailWindow:(id)fp8;
- (void)hidePalettes;
- (id)workspaceWindows;
- (void)loadWorkspaces;
- (id)worspaceSettingsWithName:(id)fp8;
- (void)deleteWorkspaceNamed:(id)fp8;
- (void)loadWorkspace:(id)fp8;
- (void)saveWorkspace:(id)fp8;
- (void)selectToolWithShortcut:(id)fp8;
- (BOOL)application:(id)fp8 openFile:(id)fp12;
- (void)openFolder:(id)fp8;
- (void)lookForFlickr;
- (void)setToolPaletteController:(id)fp8;
- (id)introWindowController;
- (void)setIntroWindowController:(id)fp8;
- (id)filterMenu;
- (void)setFilterMenu:(id)fp8;
- (id)actionsMenu;
- (void)documentController:(id)fp8 didReviewAllForSparkleUpdate:(BOOL)fp12 contextInfo:(void *)fp16;
- (BOOL)updaterShouldRestartApplication;
- (void)toggleMarchingAntsSelection:(id)fp8;
- (void)saveOpenDocumentsForWorkspace:(id)fp8;
- (void)restoreOpenDocumentsForWorkspace:(id)fp8;
- (void)changeFont:(id)fp8;
- (BOOL)applicationIsSetup;
- (void)setApplicationIsSetup:(BOOL)fp8;

@end

@interface TSPopUpButton : NSPopUpButton
{
}

- (void)drawRect:(struct _NSRect)fp8;

@end

@interface FMButton : NSButton
{
    NSImage *disabledImage;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (id)disabledImage;
- (void)setDisabledImage:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface TSWorkflowAction : NSObject
{
    NSURL *workflowScriptURL;
    NSString *displayName;
    BOOL isPDFService;
}

+ (id)workflowActionWithDisplayName:(id)fp8 workflowScriptURL:(id)fp12;
- (id)workflowScriptURL;
- (void)setWorkflowScriptURL:(id)fp8;
- (id)displayName;
- (void)setDisplayName:(id)fp8;
- (BOOL)isPDFService;
- (void)setIsPDFService:(BOOL)fp8;
- (void)dealloc;
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;

@end

@interface TSColorWell : NSColorWell
{
    struct _NSPoint mouseDownPoint;
    TSColorNoStrokeFillBox *noFillStrokeToggleButton;
    TSColorWell *_myColorWellBuddy;
    BOOL _isActive;
    BOOL _isForStroke;
    BOOL _drawSlash;
    float _startAlpha;
}

- (BOOL)isOpaque;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (void)xmouseDown:(id)fp8;
- (void)mouseDragged:(id)fp8;
- (id)hitTest:(struct _NSPoint)fp8;
- (void)setColor:(id)fp8;
- (void)setDrawSlash:(BOOL)fp8;
- (BOOL)isActive;
- (void)setIsActive:(BOOL)fp8;
- (BOOL)isForStroke;
- (void)setIsForStroke:(BOOL)fp8;
- (BOOL)drawSlash;
- (float)startAlpha;
- (void)setStartAlpha:(float)fp8;
- (id)myColorWellBuddy;
- (void)setMyColorWellBuddy:(id)fp8;

@end

@interface TSActionLabel : NSTextField
{
    int clickCountToTrigger;
}

- (void)awakeFromNib;
- (int)clickCountToTrigger;
- (void)setClickCountToTrigger:(int)fp8;
- (void)mouseDown:(id)fp8;
- (void)setEnabled:(BOOL)fp8;

@end

@interface TSColorPicker : NSImageView
{
    id delegate;
    NSColor *_color;
}

- (BOOL)pointIsInMe:(struct _NSPoint)fp8;
- (void)setColorOnDelegate:(id)fp8;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)mouseUp:(id)fp8;
- (void)mouseDragged:(id)fp8;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (id)color;
- (void)setColor:(id)fp8;

@end

@interface TSShadowOffsetWidget : NSControl
{
    id delegate;
    struct _NSPoint _blurOffset;
    float _blurOffsetX;
    float _blurOffsetY;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (struct _NSPoint)blurOffsetFromPoint:(struct _NSPoint)fp8;
- (void)askDelegateIfItIsOkToMoveOffsetTo:(struct _NSPoint)fp8;
- (void)mouseDown:(id)fp8;
- (void)mouseDragged:(id)fp8;
- (void)setBlurOffset:(struct _NSPoint)fp8;
- (void)setEnabled:(BOOL)fp8;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (struct _NSPoint)blurOffset;
- (float)blurOffsetX;
- (void)setBlurOffsetX:(float)fp8;
- (float)blurOffsetY;
- (void)setBlurOffsetY:(float)fp8;

@end

@interface TSLineEndShape : NSObject
{
    struct _NSRect bounds;
    float scale;
    float baseSize;
    int strokeSize;
    NSString *shapeToDraw;
}

+ (id)shape;
- (id)init;
- (void)dealloc;
- (float)scale;
- (void)setScale:(float)fp8;
- (id)shapeToDraw;
- (void)setShapeToDraw:(id)fp8;
- (int)strokeSize;
- (void)setStrokeSize:(int)fp8;
- (void)shapeAtPoint:(struct _NSPoint)fp8 angle:(float)fp16;
- (id)circleAtPoint:(struct _NSPoint)fp8 angle:(float)fp16;
- (id)arrowAtPoint:(struct _NSPoint)fp8 angle:(float)fp16;
- (id)diamondAtPoint:(struct _NSPoint)fp8 angle:(float)fp16;

@end

@interface TSColorNoStrokeFillBox : NSButton
{
    TSColorWell *strokeColorWell;
    TSColorWell *fillColorWell;
    NSImage *noColorImage;
    NSImage *colorImage;
}

- (void)dealloc;
- (void)awakeFromNib;
- (void)drawRect:(struct _NSRect)fp8;
- (id)activeColorWell;
- (BOOL)drawingSlash;
- (void)update;
- (id)noColorImage;
- (void)setNoColorImage:(id)fp8;
- (id)colorImage;
- (void)setColorImage:(id)fp8;

@end

@interface TSTextView : NSTextView
{
    BOOL ignoreChangeColor;
}

- (void)dealloc;
- (void)changeColor:(id)fp8;
- (BOOL)ignoreChangeColor;
- (void)setIgnoreChangeColor:(BOOL)fp8;
- (void)cancelOperation:(id)fp8;
- (BOOL)xperformKeyEquivalent:(id)fp8;
- (void)insertNewline:(id)fp8;
- (BOOL)xrespondsToSelector:(SEL)fp8;

@end

@interface NSTextView (TSExtras)
- (void)fmChangeToFontForSelection:(id)fp8;
@end

@interface TSFullScreenWindow : NSPanel
{
}

- (id)initWithContentRect:(struct _NSRect)fp8 styleMask:(unsigned int)fp24 backing:(int)fp28 defer:(BOOL)fp32;
- (void)dealloc;
- (BOOL)canBecomeKeyWindow;
- (BOOL)_hasActiveControls;

@end

@interface TSFullScreenWindowController : NSWindowController
{
    TSFullScreenView *screenCaptureView;
    id _delegate;
}

+ (id)fullScreenWindowController;
- (void)dealloc;
- (void)takeOverScreen:(id)fp8 startingWithFrame:(struct _NSRect)fp12;
- (void)fullScreenViewDidRecieveDoubleClick:(id)fp8;
- (void)cancelScreenCapture:(id)fp8;
- (id)delegate;
- (void)setDelegate:(id)fp8;

@end

@interface TSFullScreenView : NSView
{
    NSImage *_image;
    struct _NSPoint lastMouseDown;
    struct _NSPoint mouseDragStart;
    struct _NSPoint mouseDragEnd;
    struct _NSRect _originalCropFrame;
    id _delegate;
    BOOL inDrag;
    TSFullScreenInfoWidget *_infoWidget;
    BOOL _movingWidget;
    struct _NSRect _cropFrame;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)awakeFromNib;
- (void)dealloc;
- (void)drawHandleAtPoint:(struct _NSPoint)fp8;
- (void)drawHandlesForRect:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setCropFrameFromMouseDrag;
- (void)setCropFrame:(struct _NSRect)fp8;
- (void)updateWidgetInfo;
- (void)shiftCropFrame:(struct _NSPoint)fp8;
- (id)croppedImage;
- (void)keyDown:(id)fp8;
- (void)callDelegateWithGoodReturn;
- (void)beginRectSelectionWithEvent:(id)fp8;
- (void)beginMovingRectSelectionWithEvent:(id)fp8;
- (void)beginExpandingRectSelectionWithEvent:(id)fp8 usingEdge:(int)fp12;
- (struct _NSRect)knobRectForPoint:(struct _NSPoint)fp8;
- (int)knobForPoint:(struct _NSPoint)fp8;
- (int)resizeByMovingKnob:(int)fp8 toPoint:(struct _NSPoint)fp12 withEvent:(id)fp20;
- (void)mouseDown:(id)fp8;
- (void)mouseUp:(id)fp8;
- (void)mouseDragged:(id)fp8;
- (id)image;
- (void)setImage:(id)fp8;
- (id)infoWidget;
- (void)setInfoWidget:(id)fp8;
- (id)delegate;
- (void)setDelegate:(id)fp8;
- (void)ok:(id)fp8;
- (void)setupCursorRects;
- (struct _NSRect)cropFrame;

@end

@interface TSFullScreenInfoWidget : NSObject
{
    struct _NSRect _frame;
    struct _NSRect _originalFrame;
    struct _NSPoint _mouseDownPoint;
    NSView *_superview;
    NSString *_displayOne;
}

- (id)init;
- (void)dealloc;
- (void)draw;
- (struct _NSRect)frame;
- (void)setFrame:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (void)mouseDragged:(id)fp8;
- (BOOL)pointOn:(struct _NSPoint)fp8;
- (id)superview;
- (void)setSuperview:(id)fp8;
- (id)displayOne;
- (void)setDisplayOne:(id)fp8;

@end

@interface TSCenterScrollView : NSScrollView
{
    float scaleFactor;
}

- (void)mouseDown:(id)fp8;
- (void)scrollWheel:(id)fp8;

@end

@interface CCenteringClipView : NSClipView
{
    BOOL centerDocumentFlag;
    BOOL floorPoints;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (struct _NSPoint)constrainScrollPoint:(struct _NSPoint)fp8;
- (void)viewBoundsChanged:(id)fp8;
- (void)viewFrameChanged:(id)fp8;
- (void)setFrame:(struct _NSRect)fp8;
- (void)setFrameOrigin:(struct _NSPoint)fp8;
- (void)setFrameSize:(struct _NSSize)fp8;
- (void)setFrameRotation:(float)fp8;
- (BOOL)copiesOnScroll;
- (void)drawRect:(struct _NSRect)fp8;
- (void)centerDocument;
- (BOOL)preservesContentDuringLiveResize;

@end

@interface TSLayer : NSResponder
{
    BOOL _announceDealloc;
    NSString *_layerId;
    struct _NSSize _size;
    TSDocument *_document;
    TSGraphicView *_view;
    TSWindowController *_windowController;
    NSMutableArray *_graphics;
    TSGraphic *_selectedGraphic;
    NSImage *_thumbnail;
    BOOL _multipleObjectsSelected;
    BOOL _visible;
    NSString *_layerName;
    float _opacity;
    int _compositingMode;
}

+ (id)layerWithSize:(struct _NSSize)fp8;
- (id)init;
- (void)dealloc;
- (void)printRetainCount;
- (id)propertyListRepresentation;
- (void)loadPropertyListRepresentation:(id)fp8;
- (BOOL)keyDown:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)drawUnscaledInContext:(struct CGContext *)fp8;
- (id)undoManager;
- (void)copy:(id)fp8;
- (void)delete:(id)fp8;
- (void)cut:(id)fp8;
- (void)setColor:(id)fp8;
- (void)setStrokeColor:(id)fp8;
- (id)selectedGraphics;
- (void)sendToBack:(id)fp8;
- (void)bringToFront:(id)fp8;
- (BOOL)makeNewImageFromPasteboard:(id)fp8 atPoint:(struct _NSPoint)fp12;
- (BOOL)makeNewImageFromContentsOfFile:(id)fp8 atPoint:(struct _NSPoint)fp12;
- (void)invalidateGraphics:(id)fp8;
- (void)selectAll:(id)fp8;
- (void)clearSelection:(id)fp8;
- (void)selectGraphic:(id)fp8;
- (id)graphicUnderPoint:(struct _NSPoint)fp8;
- (id)editingGraphic;
- (struct CGImage *)createCGImageRef;
- (id)TIFFRepresentation;
- (id)imageWithTransparentBackground;
- (void)didChange;
- (void)didChangeInRect:(struct _NSRect)fp8;
- (void)setVisible:(BOOL)fp8;
- (void)cropToRect:(struct _NSRect)fp8;
- (void)rotateRight:(id)fp8;
- (void)rotateLeft:(id)fp8;
- (void)flipVertical:(id)fp8;
- (void)flipHorizontal:(id)fp8;
- (struct _NSRect)bounds;
- (void)setOpacity:(float)fp8;
- (void)setCompositingMode:(int)fp8;
- (void)paste:(id)fp8;
- (void)scaleXBy:(float)fp8 yBy:(float)fp12;
- (void)commitDelta;
- (void)setSize:(struct _NSSize)fp8;
- (void)canvasWillResizeTo:(struct _NSSize)fp8;
- (void)canvasDidResize;
- (int)width;
- (int)height;
- (int)xdelta;
- (int)ydelta;
- (void)pasteLayerOnTop:(id)fp8;
- (void)canvasSelectionWillNudgeByOffset:(struct _NSPoint)fp8;
- (void)canvasSelectionDidClear;
- (void)fillSelection:(id)fp8;
- (BOOL)announceDealloc;
- (void)setAnnounceDealloc:(BOOL)fp8;
- (id)layerId;
- (void)setLayerId:(id)fp8;
- (struct _NSSize)size;
- (id)document;
- (void)setDocument:(id)fp8;
- (id)view;
- (void)setView:(id)fp8;
- (id)windowController;
- (void)setWindowController:(id)fp8;
- (id)graphics;
- (void)setGraphics:(id)fp8;
- (id)selectedGraphic;
- (void)setSelectedGraphic:(id)fp8;
- (id)thumbnail;
- (void)setThumbnail:(id)fp8;
- (BOOL)multipleObjectsSelected;
- (void)setMultipleObjectsSelected:(BOOL)fp8;
- (BOOL)visible;
- (id)layerName;
- (void)setLayerName:(id)fp8;
- (float)opacity;
- (int)compositingMode;
- (int)layerType;
- (BOOL)validateMenuItem:(id)fp8;
- (void)documentIsClosing;
- (void)layerWasUnselected;
- (void)didBecomeSelected;
- (void)selectObjectsInPath:(id)fp8;
- (BOOL)canUseTool:(int)fp8;

@end

@interface TSShapeLayer : TSLayer
{
    NSMutableArray *_selectedGraphics;
    TSGraphic *_creatingGraphic;
    struct _NSRect _rubberbandRect;
    NSSet *_rubberbandGraphics;
    NSColor *_rubberbandAlphaColor;
    NSColor *_rubberbandBorderColor;
    TSGraphic *_editingGraphic;
    int _pasteboardChangeCount;
    int _pasteCascadeNumber;
    struct _NSPoint _pasteCascadeDelta;
    float _gridSpacing;
    NSColor *_gridColor;
    NSTimer *_unhideKnobsTimer;
    struct __lvFlags _lvFlags;
    struct _NSRect _verticalRulerLineRect;
    struct _NSRect _horizontalRulerLineRect;
}

+ (id)layerWithSize:(struct _NSSize)fp8;
- (id)init;
- (id)retain;
- (void)dealloc;
- (void)invalidateGraphic:(id)fp8;
- (void)invalidateGraphics:(id)fp8;
- (id)selectedGraphics;
- (id)orderedSelectedGraphics;
- (BOOL)graphicIsSelected:(id)fp8;
- (void)selectNextGraphic:(id)fp8;
- (void)selectPreviousGraphic:(id)fp8;
- (void)selectGraphic:(id)fp8;
- (void)deselectGraphic:(id)fp8;
- (void)clearSelection:(id)fp8;
- (void)cropToRect:(struct _NSRect)fp8;
- (void)setEditingGraphic:(id)fp8 editorView:(id)fp12;
- (id)editingGraphic;
- (void)startEditingGraphic:(id)fp8 withEvent:(id)fp12;
- (void)endEditing;
- (id)graphicUnderPoint:(struct _NSPoint)fp8;
- (id)graphicsIntersectingRect:(struct _NSRect)fp8;
- (BOOL)becomeFirstResponder;
- (void)drawSelectedHandlesInRect:(struct _NSRect)fp8 forView:(id)fp24;
- (void)drawRubberbandRect;
- (void)drawInContext:(struct CGContext *)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)beginEchoingMoveToRulers:(struct _NSRect)fp8;
- (void)continueEchoingMoveToRulers:(struct _NSRect)fp8;
- (void)stopEchoingMoveToRulers;
- (void)createGraphicOfClass:(Class)fp8 withEvent:(id)fp12;
- (id)creatingGraphic;
- (void)trackKnob:(int)fp8 ofGraphic:(id)fp12 withEvent:(id)fp16;
- (void)rubberbandSelectWithEvent:(id)fp8;
- (void)moveSelectedGraphicsWithEvent:(id)fp8;
- (void)selectAndTrackMouseWithEvent:(id)fp8;
- (void)selectObjectsInPath:(id)fp8;
- (void)mouseDown:(id)fp8;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (BOOL)makeNewImageFromPasteboard:(id)fp8 atPoint:(struct _NSPoint)fp12;
- (BOOL)makeNewImageFromContentsOfFile:(id)fp8 atPoint:(struct _NSPoint)fp12;
- (unsigned int)dragOperationForDraggingInfo:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (void)concludeDragOperation:(id)fp8;
- (void)updateRulers;
- (BOOL)rulerView:(id)fp8 shouldMoveMarker:(id)fp12;
- (float)rulerView:(id)fp8 willMoveMarker:(id)fp12 toLocation:(float)fp16;
- (void)rulerView:(id)fp8 didMoveMarker:(id)fp12;
- (BOOL)rulerView:(id)fp8 shouldRemoveMarker:(id)fp12;
- (void)toggleRuler:(id)fp8;
- (void)setColor:(id)fp8;
- (void)setStrokeColor:(id)fp8;
- (void)selectAll:(id)fp8;
- (void)deleteAll:(id)fp8;
- (void)delete:(id)fp8;
- (void)deleteScreenShotImage:(id)fp8;
- (void)applyBorderAroundCanvas:(id)fp8;
- (void)bringToFront:(id)fp8;
- (void)sendToBack:(id)fp8;
- (void)alignLeftEdges:(id)fp8;
- (void)alignRightEdges:(id)fp8;
- (void)alignTopEdges:(id)fp8;
- (void)alignBottomEdges:(id)fp8;
- (void)alignHorizontalCenters:(id)fp8;
- (void)alignVerticalCenters:(id)fp8;
- (void)makeSameWidth:(id)fp8;
- (void)makeSameHeight:(id)fp8;
- (void)makeNaturalSize:(id)fp8;
- (void)gridSheetDidClose:(id)fp8;
- (void)showGridSheet:(id)fp8;
- (void)snapsToGridMenuAction:(id)fp8;
- (void)showsGridMenuAction:(id)fp8;
- (void)gridSelectedGraphicsAction:(id)fp8;
- (void)copy:(id)fp8;
- (void)pasteOnBitmapLayer:(id)fp8;
- (void)pasteOnShapeLayer:(id)fp8;
- (void)pasteLayerOnTop:(id)fp8;
- (void)paste:(id)fp8;
- (void)pasteFromPasteboard:(id)fp8;
- (BOOL)enterKeyPressed;
- (BOOL)keyDown:(id)fp8;
- (void)insertText:(id)fp8;
- (void)hideKnobsMomentarily;
- (void)unhideKnobs:(id)fp8;
- (void)moveSelectedGraphicsByPoint:(struct _NSPoint)fp8;
- (void)moveLeft:(id)fp8;
- (void)moveRight:(id)fp8;
- (void)moveUp:(id)fp8;
- (void)moveDown:(id)fp8;
- (void)moveForwardAndModifySelection:(id)fp8;
- (void)moveBackwardAndModifySelection:(id)fp8;
- (void)moveUpAndModifySelection:(id)fp8;
- (void)moveDownAndModifySelection:(id)fp8;
- (void)deleteForward:(id)fp8;
- (void)deleteBackward:(id)fp8;
- (BOOL)snapsToGrid;
- (void)setSnapsToGrid:(BOOL)fp8;
- (BOOL)showsGrid;
- (void)setShowsGrid:(BOOL)fp8;
- (float)gridSpacing;
- (void)setGridSpacing:(float)fp8;
- (id)gridColor;
- (void)setGridColor:(id)fp8;
- (id)shapeLayerDictionaryFromData:(id)fp8;
- (id)propertyListRepresentationForGraphics:(id)fp8;
- (id)propertyListRepresentation;
- (void)loadPropertyListRepresentation:(id)fp8;
- (void)setDocument:(id)fp8;
- (BOOL)xrespondsToSelector:(SEL)fp8;
- (struct _NSRect)boundsForGraphics:(id)fp8;
- (struct _NSRect)drawingBoundsForGraphics:(id)fp8;
- (struct CGImage *)createCGImageRef;
- (id)imageWithTransparentBackground;
- (id)TIFFRepresentation;
- (id)TIFFRepresentationForGraphics:(id)fp8;
- (id)TIFFRepresentationForGraphics:(id)fp8 withBounds:(struct _NSRect)fp12;
- (id)TIFFRepresentationForGraphics:(id)fp8 withBounds:(struct _NSRect)fp12 transparentBackground:(BOOL)fp28;
- (struct CGImage *)createImageRefForGraphics:(id)fp8 withBounds:(struct _NSRect)fp12 transparentBackground:(BOOL)fp28;
- (id)imageDataForGraphics:(id)fp8 withBounds:(struct _NSRect)fp12 transparentBackground:(BOOL)fp28;
- (id)imageForGraphics:(id)fp8 withBounds:(struct _NSRect)fp12 transparentBackground:(BOOL)fp28;
- (id)ximageForGraphics:(id)fp8 withBounds:(struct _NSRect)fp12 transparentBackground:(BOOL)fp28;
- (id)PDFRepresentationForGraphics:(id)fp8 withBounds:(struct _NSRect)fp12;
- (id)PDFRepresentationForGraphics:(id)fp8 withBounds:(struct _NSRect)fp12 transparentBackground:(BOOL)fp28;
- (id)PDFRepresentationForGraphics:(id)fp8;
- (id)thumbnail;
- (void)scaleXBy:(float)fp8 yBy:(float)fp12;
- (void)insertGraphic:(id)fp8 atIndex:(unsigned int)fp12;
- (void)removeGraphicAtIndex:(unsigned int)fp8;
- (void)removeGraphics:(id)fp8;
- (void)removeGraphic:(id)fp8;
- (void)moveGraphic:(id)fp8 toIndex:(unsigned int)fp12;
- (void)addInGraphics:(id)fp8;
- (void)insertInGraphics:(id)fp8 atIndex:(unsigned int)fp12;
- (void)removeFromGraphicsAtIndex:(unsigned int)fp8;
- (void)replaceInGraphics:(id)fp8 atIndex:(unsigned int)fp12;
- (id)graphicsWithClass:(Class)fp8;
- (id)rectangles;
- (id)circles;
- (id)lines;
- (id)textAreas;
- (id)images;
- (void)setRectangles:(id)fp8;
- (void)addInRectangles:(id)fp8;
- (void)insertInRectangles:(id)fp8 atIndex:(unsigned int)fp12;
- (void)removeFromRectanglesAtIndex:(unsigned int)fp8;
- (void)replaceInRectangles:(id)fp8 atIndex:(unsigned int)fp12;
- (void)setCircles:(id)fp8;
- (void)addInCircles:(id)fp8;
- (void)insertInCircles:(id)fp8 atIndex:(unsigned int)fp12;
- (void)removeFromCirclesAtIndex:(unsigned int)fp8;
- (void)replaceInCircles:(id)fp8 atIndex:(unsigned int)fp12;
- (void)setLines:(id)fp8;
- (void)addInLines:(id)fp8;
- (void)insertInLines:(id)fp8 atIndex:(unsigned int)fp12;
- (void)removeFromLinesAtIndex:(unsigned int)fp8;
- (void)replaceInLines:(id)fp8 atIndex:(unsigned int)fp12;
- (void)setTextAreas:(id)fp8;
- (void)addInTextAreas:(id)fp8;
- (void)insertInTextAreas:(id)fp8 atIndex:(unsigned int)fp12;
- (void)removeFromTextAreasAtIndex:(unsigned int)fp8;
- (void)replaceInTextAreas:(id)fp8 atIndex:(unsigned int)fp12;
- (void)setImages:(id)fp8;
- (void)addInImages:(id)fp8;
- (void)insertInImages:(id)fp8 atIndex:(unsigned int)fp12;
- (void)removeFromImagesAtIndex:(unsigned int)fp8;
- (void)replaceInImages:(id)fp8 atIndex:(unsigned int)fp12;
- (id)indicesOfObjectsByEvaluatingRangeSpecifier:(id)fp8;
- (id)indicesOfObjectsByEvaluatingRelativeSpecifier:(id)fp8;
- (id)indicesOfObjectsByEvaluatingObjectSpecifier:(id)fp8;
- (void)setHasArrowAction:(id)fp8;
- (void)setArrowScaleAction:(id)fp8;
- (void)alignSelectedTextAreasTo:(int)fp8;
- (void)alignCenter:(id)fp8;
- (void)alignRight:(id)fp8;
- (void)alignLeft:(id)fp8;
- (void)alignJustified:(id)fp8;
- (int)layerType;
- (void)canvasWillResizeTo:(struct _NSSize)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (void)documentIsClosing;
- (void)layerWasUnselected;
- (void)textStyleAction:(id)fp8;
- (BOOL)canUseTool:(int)fp8;
- (void)duplicateSelectedShapes:(id)fp8;

@end

@interface TSDocument : NSDocument
{
    NSMutableArray *_layers;
    struct _NSSize _canvasSize;
    BOOL _makeNewFromClipboard;
    BOOL _shownFormatLayerProblemError;
    FMDatabase *_undoDb;
    NSString *_undoDatabasePath;
    BOOL _showsGrid;
    BOOL _snapsToGrid;
    float _gridSpacing;
    NSColor *_gridColor;
    NSColor *_lastFillColor;
    NSColor *_lastStrokeColor;
    NSMutableDictionary *_junkForWindowController;
    struct _NSSize _dpi;
}

- (id)init;
- (void)dealloc;
- (void)setupUndoDatabase;
- (void)makeWindowControllers;
- (id)windowController;
- (id)drawDocumentDictionary;
- (id)drawDocumentData;
- (id)drawDocumentDictionaryFromData:(id)fp8;
- (struct CGContext *)createContextRefUsingVisibleLayers;
- (id)imageUsingVisibleLayers;
- (id)CIImage;
- (struct CGImage *)createCGImage;
- (id)bitmapUsingRepresentation:(int)fp8;
- (id)psdRepresentation;
- (id)BMPRepresentation;
- (id)icnsRepresentation;
- (id)PDFRepresentation;
- (void)validateJPEGOptions;
- (void)setFileType:(id)fp8;
- (BOOL)prepareSavePanel:(id)fp8;
- (BOOL)writeSafelyToURL:(id)fp8 ofType:(id)fp12 forSaveOperation:(int)fp16 error:(id *)fp20;
- (void)printRetainCount;
- (void)close;
- (id)dataRepresentationOfType:(id)fp8;
- (BOOL)loadAcornDocument:(id)fp8;
- (BOOL)xloadPhotoshopDocument:(id)fp8;
- (BOOL)loadPhotoshopDocument:(id)fp8;
- (BOOL)loadBitmapDocument:(id)fp8;
- (BOOL)loadPDFDocument:(id)fp8;
- (BOOL)loadDataRepresentation:(id)fp8 ofType:(id)fp12;
- (BOOL)revertToContentsOfURL:(id)fp8 ofType:(id)fp12 error:(id *)fp16;
- (id)appropriateWindowForDocModalOperations;
- (void)printDocumentWithSettings:(id)fp8 showPrintPanel:(BOOL)fp12 delegate:(id)fp16 didPrintSelector:(SEL)fp20 contextInfo:(void *)fp24;
- (void)setPrintInfo:(id)fp8;
- (void)addLayer:(id)fp8 atIndex:(int)fp12;
- (void)removeLayerAtIndex:(int)fp8;
- (void)removeLayer:(id)fp8;
- (id)layerWithLayerId:(id)fp8;
- (void)newLayerWithNSImage:(id)fp8;
- (id)validRequestorForSendType:(id)fp8 returnType:(id)fp12;
- (void)paste:(id)fp8;
- (void)mergeCurrentLayerDown:(id)fp8;
- (void)bringLayerToFront:(id)fp8;
- (void)bringLayerForward:(id)fp8;
- (void)sendLayerBackward:(id)fp8;
- (void)sendLayerToBack:(id)fp8;
- (void)mergeVisibleLayers:(id)fp8;
- (void)flattenImage:(id)fp8;
- (void)xrasterizeShapeLayer:(id)fp8;
- (void)rasterizeShapeLayer:(id)fp8;
- (void)setCanvasSize:(struct _NSSize)fp8;
- (void)cropImage:(id)fp8;
- (void)scaleCanvasToSize:(struct _NSSize)fp8;
- (void)resizeDocumentToSize:(struct _NSSize)fp8;
- (void)scaleImage:(id)fp8;
- (void)imageSizeControllerDidFinish:(id)fp8;
- (void)zoomToFit:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (BOOL)xrespondsToSelector:(SEL)fp8;
- (void)duplicateImage:(id)fp8;
- (id)newImageFromSelection:(id)fp8;
- (void)duplicateLayer:(id)fp8;
- (struct _NSRect)canvasBounds;
- (id)valueForKey:(id)fp8;
- (void)sendToFlickrUploader:(id)fp8;
- (id)layers;
- (void)setLayers:(id)fp8;
- (struct _NSSize)canvasSize;
- (BOOL)makeNewFromClipboard;
- (void)setMakeNewFromClipboard:(BOOL)fp8;
- (BOOL)shownFormatLayerProblemError;
- (void)setShownFormatLayerProblemError:(BOOL)fp8;
- (id)undoDb;
- (void)setUndoDb:(id)fp8;
- (id)undoDatabasePath;
- (void)setUndoDatabasePath:(id)fp8;
- (BOOL)showsGrid;
- (void)setShowsGrid:(BOOL)fp8;
- (BOOL)snapsToGrid;
- (void)setSnapsToGrid:(BOOL)fp8;
- (float)gridSpacing;
- (void)setGridSpacing:(float)fp8;
- (id)gridColor;
- (void)setGridColor:(id)fp8;
- (id)lastFillColor;
- (void)setLastFillColor:(id)fp8;
- (id)lastStrokeColor;
- (void)setLastStrokeColor:(id)fp8;
- (id)junkForWindowController;
- (void)setJunkForWindowController:(id)fp8;
- (struct _NSSize)dpi;
- (void)setDpi:(struct _NSSize)fp8;
- (id)currentLayer;

@end

@interface TSWindowController : NSWindowController
{
    NSView *savePanelAccesoryView;
    NSPopUpButton *savePanelImageFormatButton;
    NSTabView *savePanelTabView;
    NSPopUpButton *savePanelCompressionButton;
    NSSlider *savePanelImageQualtiy;
    NSTextField *savePanelImageQualtiyLabel;
    NSView *savePanelJPEGView;
    NSSavePanel *savePanel;
    TSGraphicView *graphicView;
    TSCenterScrollView *canvasScrollView;
    NSSlider *transparencySlider;
    NSSlider *scaleSlider;
    NSPopUpButton *scriptServicesButton;
    NSView *scriptServicesToolbarView;
    NSSegmentedControl *toolsSegmentedControl;
    NSView *toolsToolbarView;
    NSMutableDictionary *_toolbarItems;
    TSActionLabel *purchaseOnlineButton;
    float preHighlighterStrokeSize;
    int imageSelectClickCount;
    BOOL needsUpdate;
    NSPanel *resizeCanvasSheet;
    TSActionLabel *canvasSizeLabel;
    int canvasSizeLabelState;
    NSTextField *canvasResizeWidth;
    NSTextField *canvasResizeHeight;
    int currentCompositingMode;
    struct _NSRect _preFullScreenFrame;
    struct _NSRect _preCanvasScaleFrame;
    struct _NSSize _preWindowScaleSize;
    float _lastCanvasScaleProportion;
}

- (id)init;
- (void)dealloc;
- (void)awakeFromNib;
- (void)observeValueForKeyPath:(id)fp8 ofObject:(id)fp12 change:(id)fp16 context:(void *)fp20;
- (void)checkIfOnScreenAndMoveIfNot;
- (void)updateWinder;
- (struct _NSSize)documentSize;
- (void)setUpGraphicViewAndWindowSizeAnimating:(BOOL)fp8;
- (void)zoomIn:(id)fp8;
- (void)zoomOut:(id)fp8;
- (void)scaleToFitOrActual:(id)fp8;
- (void)scaleToDouble:(id)fp8;
- (void)zoomToFit:(id)fp8;
- (void)scaleToActualSize:(id)fp8;
- (void)scaleToTag:(id)fp8;
- (void)scaleToMaximum:(id)fp8;
- (void)scaleToMinimum:(id)fp8;
- (void)windowDidLoad;
- (void)setDocument:(id)fp8;
- (id)graphicView;
- (id)canvasScrollView;
- (void)invalidateGraphic:(id)fp8;
- (BOOL)window:(id)fp8 shouldConstrainFrameRect:(struct _NSRect)fp12 toScreen:(id)fp28;
- (BOOL)isInFullScreen;
- (void)toggleFullScreen:(id)fp8;
- (BOOL)leKeyDown:(BOOL)fp8;
- (void)newGraphicChosen:(id)fp8;
- (void)graphicCreated:(id)fp8;
- (void)graphicChanged:(id)fp8;
- (void)selectionChanged:(id)fp8;
- (void)windowDidUpdate:(id)fp8;
- (void)importOpenPanelDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)importImage:(id)fp8;
- (struct _NSRect)canvasLocationInScreen;
- (struct _NSRect)frameForCanvasImageCapture;
- (void)setScreenCaptureImage:(id)fp8 withXOffset:(int)fp12;
- (void)showWorkflowPopup:(id)fp8;
- (void)workflowScriptAction:(id)fp8;
- (int)imageSelectClickCount;
- (void)endOptionScale;
- (void)windowDidResize:(id)fp8;
- (void)windowIsDoneResizing:(id)fp8 viaWidget:(id)fp12;
- (struct _NSSize)windowWillResize:(id)fp8 toSize:(struct _NSSize)fp12;
- (void)showResizeCanvasSheet:(id)fp8;
- (void)closeResizeCanvasSheet:(id)fp8;
- (void)resizeCanvasAction:(id)fp8;
- (id)canvasSize;
- (void)changeCanvasSizeLabel:(id)fp8;
- (void)updateCanvasSizeLabel;
- (BOOL)xrespondsToSelector:(SEL)fp8;
- (id)currentLayer;
- (id)addNewLayerAtIndex:(int)fp8;
- (id)addNewLayer:(id)fp8;
- (id)addNewShapeLayerAtIndex:(int)fp8 isTextOnly:(BOOL)fp12;
- (id)addNewShapeLayer:(id)fp8;
- (void)removeSelectedLayer:(id)fp8;
- (void)applicationWillQuit:(id)fp8;
- (void)windowWillClose:(id)fp8;
- (struct _NSRect)windowWillUseStandardFrame:(id)fp8 defaultFrame:(struct _NSRect)fp12;
- (BOOL)canDeleteCurrentLayer;
- (void)duplicateLayer:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (void)loadToolbar;
- (id)toolbar:(id)fp8 itemForItemIdentifier:(id)fp12 willBeInsertedIntoToolbar:(BOOL)fp16;
- (id)toolbarDefaultItemIdentifiers:(id)fp8;
- (id)toolbarAllowedItemIdentifiers:(id)fp8;
- (struct _NSRect)preFullScreenFrame;
- (void)setPreFullScreenFrame:(struct _NSRect)fp8;
- (id)toolbarItems;
- (void)setToolbarItems:(id)fp8;

@end

@interface TSBitmapLayer : TSLayer
{
    CIImage *_previewCIImage;
    TSImage *_floatImage;
    struct CGImage *_cacheImage;
    struct CGContext *_context;
    struct CGContext *_scratchPad;
    struct CGContext *_directContext;
    int *_basePtr;
    struct _NSRect _floatImageFrame;
    struct _NSPoint _drawDelta;
    long _editId;
    NSBezierPath *_gradientPreviewPath;
    BOOL _erase;
    BOOL _drawScratch;
    NSBezierPath *_shapePath;
    BOOL _isMask;
    TSShapeImage *_transformImage;
    struct _NSPoint _lastDownPoint;
}

+ (id)layerWithSize:(struct _NSSize)fp8;
- (id)init;
- (id)initWithSize:(struct _NSSize)fp8 view:(id)fp16;
- (void)dealloc;
- (id)maskLayer;
- (id)propertyListRepresentation;
- (id)propertyListRepresentationForFrame:(struct _NSRect)fp8;
- (void)loadPropertyListRepresentation:(id)fp8;
- (void)didChange;
- (void)didChangeInRect:(struct _NSRect)fp8;
- (void)setNewContext:(struct CGContext *)fp8;
- (void)makeScratchPad;
- (void)makeDirectContext;
- (void)clearScratchPad;
- (void)clearScratchRect:(struct _NSRect)fp8;
- (struct _NSRect)flippedRectInLayer:(struct _NSRect)fp8;
- (struct _NSPoint)flippedPoint:(struct _NSPoint)fp8;
- (struct _NSRect)selectionBounds;
- (id)window;
- (void)drawRect:(struct _NSRect)fp8 inContext:(struct CGContext *)fp24 shouldFlip:(BOOL)fp28;
- (void)drawRect:(struct _NSRect)fp8;
- (void)drawUnscaledInContext:(struct CGContext *)fp8;
- (void)canvasDidResize;
- (void)resizeContextToSize:(struct _NSSize)fp8 withUndo:(BOOL)fp16 drawImage:(BOOL)fp20;
- (void)ciscaleXBy:(float)fp8 yBy:(float)fp12;
- (void)scaleXBy:(float)fp8 yBy:(float)fp12;
- (void)nudgeOffset:(struct _NSPoint)fp8;
- (void)setFloatImage:(id)fp8;
- (void)setFloatImageFrame:(struct _NSRect)fp8;
- (void)canvasSelectionWillNudgeByOffset:(struct _NSPoint)fp8;
- (void)canvasSelectionDidClear;
- (void)placeFloatImage;
- (void)beginMovingImageWithMouse:(id)fp8;
- (void)setBitmapState:(id)fp8;
- (void)commitDelta;
- (void)updateRectInLayer:(struct _NSRect)fp8;
- (BOOL)beginDrawingShapeWithEvent:(id)fp8;
- (void)beginDrawingWithEvent:(id)fp8;
- (void)placeContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 usingUndo:(BOOL)fp20 clipToSelection:(BOOL)fp24;
- (void)placeContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 usingUndo:(BOOL)fp20;
- (void)placeImage:(struct CGImage *)fp8 inFrame:(struct _NSRect)fp12 usingUndo:(BOOL)fp28;
- (void)placeTSImage:(id)fp8 inFrame:(struct _NSRect)fp12 usingUndo:(BOOL)fp28 clipToSelection:(BOOL)fp32 clearFrame:(BOOL)fp36;
- (void)overlayContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 usingUndo:(BOOL)fp20;
- (void)mouseDown:(id)fp8;
- (struct _NSRect)virtualFrame;
- (void)pasteImageData:(id)fp8 atLayerPoint:(struct _NSPoint)fp12 isUndoable:(BOOL)fp20;
- (void)paste:(id)fp8;
- (void)pasteOnBitmapLayer:(id)fp8;
- (void)pasteOnShapeLayer:(id)fp8;
- (void)pasteLayerOnTop:(id)fp8;
- (void)newBrush:(id)fp8;
- (BOOL)keyDown:(id)fp8;
- (id)TIFFRepresentation;
- (id)imageWithTransparentBackground;
- (id)fullImageWithTransparentBackground;
- (id)thumbnail;
- (void)copy:(id)fp8;
- (void)cropToRect:(struct _NSRect)fp8;
- (void)freeRotate:(float)fp8 updateDrawDelta:(BOOL)fp12;
- (void)rotate:(float)fp8 updateDrawDelta:(BOOL)fp12;
- (void)rotateRight:(id)fp8;
- (void)rotateLeft:(id)fp8;
- (void)flipVertical:(id)fp8;
- (void)flipHorizontal:(id)fp8;
- (struct CGContext *)createContextRefFromBounds:(struct _NSRect)fp8;
- (struct CGImage *)createImageRefFromBounds:(struct _NSRect)fp8;
- (struct CGImage *)createCGImageRef;
- (void)floodFillAtPoint:(struct _NSPoint)fp8;
- (void)drawBezier:(id)fp8 fromPoint:(struct _NSPoint)fp12 toPoint:(struct _NSPoint)fp20;
- (id)xboolArrayToBezierPath:(char *)fp8;
- (id)boolArrayToBezierPath:(char **)fp8;
- (void)clearInvertedSelectionFromContext:(struct CGContext *)fp8;
- (struct CGImage *)createLayerMaskForSelection;
- (struct _NSRect)translatedCanvasSelectionRectForLayer;
- (struct _NSRect)translateCanvasRectToLayerRect:(struct _NSRect)fp8;
- (struct _NSRect)translateLayerRectToCanvasRect:(struct _NSRect)fp8;
- (struct _NSPoint)translateCanvasPointToLayerPoint:(struct _NSPoint)fp8;
- (struct _NSPoint)translateLayerPointToCanvasPoint:(struct _NSPoint)fp8;
- (struct _NSPoint)translatedPointInCanvasFromEvent:(id)fp8;
- (struct CGImage *)createImageRefFromSelection;
- (struct CGContext *)createContextRefFromSelection;
- (id)CIImage;
- (void)setCIImage:(id)fp8 usingUndo:(BOOL)fp12;
- (id)previewCIImage;
- (void)setPreviewCIImage:(id)fp8;
- (void)applyCIImageFromFilter:(id)fp8;
- (void)selectAll:(id)fp8;
- (void)delete:(id)fp8;
- (void)fillSelection:(id)fp8;
- (void)makeGradientWithStartPoint:(struct _NSPoint)fp8 endPoint:(struct _NSPoint)fp16;
- (void)makeGradientWithEvent:(id)fp8;
- (struct _NSRect)bitmapBounds;
- (void)setDrawDelta:(struct _NSPoint)fp8;
- (void)toolDidChange:(id)fp8;
- (int)xdelta;
- (int)ydelta;
- (id)floatImage;
- (struct _NSRect)floatImageFrame;
- (struct CGContext *)context;
- (struct CGImage *)cacheImage;
- (void)setCacheImage:(struct CGImage *)fp8;
- (struct CGContext *)scratchPad;
- (void)setScratchPad:(struct CGContext *)fp8;
- (struct CGContext *)directContext;
- (void)setDirectContext:(struct CGContext *)fp8;
- (struct _NSPoint)drawDelta;
- (long)editId;
- (void)setEditId:(long)fp8;
- (id)gradientPreviewPath;
- (void)setGradientPreviewPath:(id)fp8;
- (BOOL)erase;
- (void)setErase:(BOOL)fp8;
- (BOOL)drawScratch;
- (void)setDrawScratch:(BOOL)fp8;
- (id)shapePath;
- (void)setShapePath:(id)fp8;
- (BOOL)isMask;
- (void)setIsMask:(BOOL)fp8;
- (int)layerType;
- (void)transformSelection:(id)fp8;
- (id)transformImage;
- (void)setTransformImage:(id)fp8;
- (void)invertImage:(id)fp8;
- (void)commitLayerEffects;

@end

@interface TSPaletteWindowController : NSWindowController
{
    TSGraphicView *_inspectingGraphicView;
    TSWindowController *_inspectingWindowController;
    BOOL _needsUpdate;
}

+ (id)sharedPaletteWindowController;
+ (void)registerPaletteWindowController:(id)fp8;
+ (id)paletteWindowControllers;
- (void)setMainWindow:(id)fp8;
- (void)windowDidLoad;
- (void)windowWillClose:(id)fp8;
- (void)saveWindowVisibleState;
- (void)restoreWindowVisibleState;
- (void)mainWindowChanged:(id)fp8;
- (void)mainWindowResigned:(id)fp8;
- (void)windowDidUpdate:(id)fp8;
- (void)update;
- (id)document;
- (id)windowTitleForDocumentDisplayName:(id)fp8;
- (id)inspectingGraphicView;
- (void)setInspectingGraphicView:(id)fp8;
- (id)inspectingWindowController;
- (void)setInspectingWindowController:(id)fp8;
- (BOOL)needsUpdate;
- (void)setNeedsUpdate:(BOOL)fp8;

@end

@interface TSToolPaletteController : TSPaletteWindowController
{
    TSToolbarPaletteButton *circleButton;
    TSToolbarPaletteButton *rectButton;
    TSToolbarPaletteButton *roundRectButton;
    TSToolbarPaletteButton *lineButton;
    TSToolbarPaletteButton *arrowButton;
    TSToolbarPaletteButton *eraseButton;
    TSToolbarPaletteButton *zoomButton;
    TSToolbarPaletteButton *fillButton;
    TSToolbarPaletteButton *magicWandButton;
    TSToolbarPaletteButton *textButton;
    TSToolbarPaletteButton *gradientButton;
    TSToolbarPaletteButton *pencilButton;
    TSToolbarPaletteButton *handButton;
    TSToolbarPaletteButton *cropButton;
    TSColorNoStrokeFillBox *noStrokeFillBox;
    NSView *fillView;
    NSView *brushView;
    NSView *eraserView;
    NSView *zilchView;
    NSView *selectionView;
    NSView *shapeView;
    NSView *textView;
    NSView *moveView;
    NSView *shadowView;
    NSTextField *shapeWidthLabel;
    NSTextField *shapeHeightLabel;
    NSTextField *shapeXLabel;
    NSTextField *shapeYLabel;
    NSTextField *lineWidthTextField;
    NSStepper *lineWidthStepper;
    NSTextField *selectionWidthField;
    NSTextField *selectionHeightField;
    NSView *shapeAlignView;
    FMButton *alignLeftEdgesButton;
    FMButton *alignRightEdgesButton;
    FMButton *alignTopEdgesButton;
    FMButton *alignBottomEdgesButton;
    FMButton *alignHCenterButton;
    FMButton *alignVCenterButton;
    FMButton *sendToBackButton;
    FMButton *bringToFrontButton;
    TSToolbarPaletteButton *rectSelectionButton;
    TSToolbarPaletteButton *freeSelectionButton;
    TSToolbarPaletteButton *ellipticalSelectionButton;
    NSView *marqueeToolView;
    TSViewWindow *marqueViewWindow;
    NSView *gradientToolView;
    NSTextField *penXLabel;
    NSTextField *penYLabel;
    NSButton *_resetColorsButton;
    TSColorWell *_foreColorWell;
    TSColorWell *_backColorWell;
    NSColor *_frontColor;
    NSColor *_backColor;
    int _selectedToolTag;
    NSButton *_hasStrokeButton;
    NSButton *_hasFillButton;
    NSButton *_hasRectRadiusButton;
    NSTextField *rectRadiusTextField;
    NSStepper *rectRadiusStepper;
    NSButton *_hasShadowButton;
    NSSlider *_shadowRadiusSlider;
    TSShadowOffsetWidget *_shadowOffsetWidget;
    NSTextField *_shadowOffsetXField;
    NSTextField *_shadowOffsetYField;
    NSButton *_shapeHasShadowButton;
    NSSlider *_shapeShadowRadiusSlider;
    TSShadowOffsetWidget *_shapeShadowOffsetWidget;
    NSTextField *_shapeShadowOffsetXField;
    NSTextField *_shapeShadowOffsetYField;
    NSWindow *_detailWindow;
    NSView *_detailSuperview;
    NSView *_layersView;
    NSView *_penPostionView;
    int _lastToolTag;
    int _shapeLayerActive;
    NSString *_penX;
    NSString *_penY;
    NSString *_penXY;
    NSButton *antiAliasPencilButton;
    NSPopUpButton *_fontNameButton;
    NSPopUpButton *_fontStyleButton;
    NSComboBox *_fontSizeComboBox;
    NSStepper *_fontSizeStepper;
    NSTextField *_fontSizeField;
    NSWindow *_colorPanel;
    TSGraphic *_placeholderGraphic;
    TSGraphic *_selectedGraphic;
    NSButton *_fullScreenButton;
    NSMenu *layerTableMenu;
    NSPopUpButton *compositingModePopUpButton;
    NSSlider *opacitySlider;
    NSButton *addLayerButton;
    NSButton *deleteLayerButton;
    NSTableView *toolsTable;
    NSTableView *layersTable;
    NSView *layerControlsView;
    NSView *toolControlsView;
    NSTextField *penXYLabel;
    NSButton *shapeInfoShadowButton;
    NSButton *textInfoShadowButton;
    NSTabView *shapeTabView;
    NSTabView *textTabView;
    TSLayer *_currentLayer;
    NSMutableDictionary *lastSelectedLayers;
    NSArray *toolNames;
    NSTextField *toolsLabel;
    NSTextField *colorLabel;
    int previousMoveTag;
    int previousSelectTag;
    int previousShapeTag;
}

+ (id)sharedPaletteWindowController;
+ (id)cursorWithKey:(id)fp8 size:(float)fp12 withScale:(float)fp16 crossOut:(BOOL)fp20;
- (id)initWithWindow:(id)fp8;
- (void)awakeFromNib;
- (void)updateLayerRowSize;
- (void)makeLabelsWhiteInView:(id)fp8;
- (void)refreshPalettes;
- (void)observeValueForKeyPath:(id)fp8 ofObject:(id)fp12 change:(id)fp16 context:(void *)fp20;
- (void)windowDidLoad;
- (void)applicationWillQuit:(id)fp8;
- (void)packItUp;
- (void)toolSelectedAction:(id)fp8;
- (void)loadDetailView:(id)fp8;
- (void)hideLayers:(id)fp8 overTime:(float)fp12;
- (void)showLayers:(id)fp8 overTime:(float)fp12;
- (void)selectRowWithName:(id)fp8;
- (void)selectButtonWithCurrentTag;
- (void)setSelectedToolTag:(int)fp8;
- (void)swapColors:(id)fp8;
- (void)resetColors:(id)fp8;
- (void)swapStrokeFill:(id)fp8;
- (void)handleProximity:(id)fp8;
- (void)updateButtonsState;
- (void)updateSelectionBounds:(id)fp8;
- (void)newGraphicSelected:(id)fp8;
- (void)showAlignPopup:(id)fp8;
- (void)showMarqueePopup:(id)fp8;
- (void)saveWindowVisibleState;
- (void)restoreWindowVisibleState;
- (void)setupBindings;
- (Class)currentGraphicClass;
- (void)setValue:(id)fp8 forKey:(id)fp12;
- (id)activeColorWell;
- (void)setActiveColor:(id)fp8;
- (void)setPenPosition:(struct _NSPoint)fp8;
- (void)setMainWindow:(id)fp8;
- (BOOL)selectToolWithChar:(BOOL)fp8;
- (void)selectNextLayer:(id)fp8;
- (void)selectPreviousLayer:(id)fp8;
- (void)selectColor:(id)fp8;
- (BOOL)shadowOffsetWidget:(id)fp8 shouldMoveShadowOffsetToPoint:(struct _NSPoint)fp12;
- (void)togglePalettesVisible:(id)fp8;
- (void)changeColor:(id)fp8;
- (id)foreColorWell;
- (void)setForeColorWell:(id)fp8;
- (id)backColorWell;
- (void)setBackColorWell:(id)fp8;
- (id)frontColor;
- (void)setFrontColor:(id)fp8;
- (id)backColor;
- (void)setBackColor:(id)fp8;
- (int)selectedToolTag;
- (id)hasStrokeButton;
- (void)setHasStrokeButton:(id)fp8;
- (id)hasFillButton;
- (void)setHasFillButton:(id)fp8;
- (id)hasShadowButton;
- (void)setHasShadowButton:(id)fp8;
- (id)shadowRadiusSlider;
- (void)setShadowRadiusSlider:(id)fp8;
- (id)shadowOffsetWidget;
- (void)setShadowOffsetWidget:(id)fp8;
- (id)detailWindow;
- (void)setDetailWindow:(id)fp8;
- (id)detailSuperview;
- (void)setDetailSuperview:(id)fp8;
- (int)lastToolTag;
- (void)setLastToolTag:(int)fp8;
- (int)shapeLayerActive;
- (void)setShapeLayerActive:(int)fp8;
- (id)penXY;
- (void)setPenXY:(id)fp8;
- (id)penX;
- (void)setPenX:(id)fp8;
- (id)penY;
- (void)setPenY:(id)fp8;
- (void)loadMembersForFont:(id)fp8;
- (void)loadFontAttributes:(id)fp8;
- (void)convertSelectedFontToFamily:(id)fp8 trait:(id)fp12 size:(float)fp16;
- (void)fontFamilyChange:(id)fp8;
- (void)fontTraitChange:(id)fp8;
- (void)comboBoxFontSizeChangeChange:(id)fp8;
- (id)selectedFont;
- (void)textDidChange:(id)fp8;
- (void)foreColorWellClicked:(id)fp8;
- (void)setSelectedGraphic:(id)fp8;
- (id)selectedGraphic;
- (id)placeholderGraphic;
- (int)selectedLayerIndexForDocument:(id)fp8;
- (void)update;
- (id)reverseLayers;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (void)xtableView:(id)fp8 willDisplayCell:(id)fp12 forTableColumn:(id)fp16 row:(int)fp20;
- (void)tableView:(id)fp8 willDisplayCell:(id)fp12 forTableColumn:(id)fp16 row:(int)fp20;
- (void)tableViewSelectionDidChange:(id)fp8;
- (void)tableView:(id)fp8 setObjectValue:(id)fp12 forTableColumn:(id)fp16 row:(int)fp20;
- (BOOL)tableView:(id)fp8 writeRowsWithIndexes:(id)fp12 toPasteboard:(id)fp16;
- (unsigned int)tableView:(id)fp8 validateDrop:(id)fp12 proposedRow:(int)fp16 proposedDropOperation:(int)fp20;
- (BOOL)tableView:(id)fp8 acceptDrop:(id)fp12 row:(int)fp16 dropOperation:(int)fp20;
- (int)selectedLayerIndex;
- (void)selectLayer:(id)fp8;
- (id)currentLayer;
- (void)setCurrentLayer:(id)fp8;
- (void)addMode:(int)fp8 withTitle:(id)fp12 toMenu:(id)fp16;
- (void)loadCompositingModes;
- (struct _NSSize)windowWillResize:(id)fp8 toSize:(struct _NSSize)fp12;
- (void)toggleShapeShadowInfo:(id)fp8;
- (void)toggleTextShadowInfo:(id)fp8;

@end

@interface NSDictionary (TSNSImageAdditions)
- (id)filterDisplayName;
@end

@interface CIImage (TSNSImageAdditions)
- (id)NSImageFromRect:(struct CGRect)fp8;
- (id)NSImage;
@end

@interface NSImage (TSNSImageAdditions)
- (id)CIImage;
- (void)drawAtPoint:(struct _NSPoint)fp8;
- (void)draw;
- (id)scaledCenteredImageWithMaxWidthHeight:(float)fp8 backgroundImage:(id)fp12 borderColor:(id)fp16;
- (id)invertedImage;
@end

@interface TSPaletteWindow : NSPanel
{
    BOOL windowMoving;
    BOOL lMouseDown;
}

- (id)initWithContentRect:(struct _NSRect)fp8 styleMask:(unsigned int)fp24 backing:(int)fp28 defer:(BOOL)fp32;
- (void)xorderFront:(id)fp8;
- (BOOL)canBecomeMainWindow;
- (void)awakeFromNib;
- (void)windowWillMove:(id)fp8;

@end

@interface NSString (CarbonFSRefCreation)
- (BOOL)getFSRef:(struct FSRef *)fp8 createFileIfNecessary:(BOOL)fp12;
@end

@interface IconFamily : NSObject
{
    struct IconFamilyResource **hIconFamily;
}

+ (id)iconFamily;
+ (id)iconFamilyWithContentsOfFile:(id)fp8;
+ (id)iconFamilyWithIconOfFile:(id)fp8;
+ (id)iconFamilyWithIconFamilyHandle:(struct IconFamilyResource **)fp8;
+ (id)iconFamilyWithSystemIcon:(int)fp8;
+ (id)iconFamilyWithThumbnailsOfImage:(id)fp8;
+ (id)iconFamilyWithThumbnailsOfImage:(id)fp8 usingImageInterpolation:(int)fp12;
+ (BOOL)removeCustomIconFromFile:(id)fp8;
- (id)init;
- (id)initWithContentsOfFile:(id)fp8;
- (id)initWithIconFamilyHandle:(struct IconFamilyResource **)fp8;
- (id)initWithIconOfFile:(id)fp8;
- (id)initWithSystemIcon:(int)fp8;
- (id)initWithThumbnailsOfImage:(id)fp8;
- (id)initWithThumbnailsOfImage:(id)fp8 usingImageInterpolation:(int)fp12;
- (void)dealloc;
- (id)bitmapImageRepWithAlphaForIconFamilyElement:(unsigned long)fp8;
- (id)imageWithAllReps;
- (BOOL)setIconFamilyElement:(unsigned long)fp8 fromBitmapImageRep:(id)fp12;
- (BOOL)setAsCustomIconForFile:(id)fp8;
- (BOOL)setAsCustomIconForFile:(id)fp8 withCompatibility:(BOOL)fp12;
- (BOOL)setAsCustomIconForDirectory:(id)fp8;
- (BOOL)setAsCustomIconForDirectory:(id)fp8 withCompatibility:(BOOL)fp12;
- (BOOL)writeToFile:(id)fp8;
- (id)icnsData;

@end

@interface IconFamily (ScrapAdditions)
+ (BOOL)canInitWithScrap;
+ (id)iconFamilyWithScrap;
- (id)initWithScrap;
- (BOOL)putOnScrap;
@end

@interface IconFamily (Internals)
+ (id)resampleImage:(id)fp8 toIconWidth:(int)fp12 usingImageInterpolation:(int)fp16;
+ (char **)get32BitDataFromBitmapImageRep:(id)fp8 requiredPixelSize:(int)fp12;
+ (char **)get8BitDataFromBitmapImageRep:(id)fp8 requiredPixelSize:(int)fp12;
+ (char **)get8BitMaskFromBitmapImageRep:(id)fp8 requiredPixelSize:(int)fp12;
+ (char **)get1BitMaskFromBitmapImageRep:(id)fp8 requiredPixelSize:(int)fp12;
- (BOOL)addResourceType:(unsigned long)fp8 asResID:(int)fp12;
@end

@interface TSBitmapLayer (TSBitmapLayerTestAdditions)
- (void)maskTest;
@end

@interface TSToolbarPaletteButton : NSButton
{
    BOOL _isSelected;
    BOOL _drawsExtraCarrot;
    NSImage *_regularImage;
    NSImage *_downImage;
    NSImage *_selectedImage;
    NSImage *_originalImage;
}

- (void)awakeFromNib;
- (void)dealloc;
- (void)deselect:(id)fp8;
- (void)setIsSelected:(BOOL)fp8;
- (BOOL)acceptsFirstResponder;
- (void)makeImages;
- (void)xmakeImages;
- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)isSelected;
- (BOOL)drawsExtraCarrot;
- (void)setDrawsExtraCarrot:(BOOL)fp8;
- (id)regularImage;
- (void)setRegularImage:(id)fp8;
- (id)downImage;
- (void)setDownImage:(id)fp8;
- (id)selectedImage;
- (void)setSelectedImage:(id)fp8;

@end

@interface TSPluginInvoker : NSObject
{
    id _target;
    SEL _action;
    id _userObject;
}

+ (id)invokerWithTarget:(id)fp8 action:(SEL)fp12 userObject:(id)fp16;
- (void)dealloc;
- (void)invokeWithContext:(struct CGContext *)fp8;
- (id)invokeWithImage:(id)fp8;
- (id)target;
- (void)setTarget:(id)fp8;
- (SEL)action;
- (void)setAction:(SEL)fp8;
- (id)userObject;
- (void)setUserObject:(id)fp8;

@end

@interface TSPluginManager : NSObject
{
}

+ (id)sharedPluginManager;
- (id)pluginDir;
- (BOOL)addPluginsMenuTitle:(id)fp8 withSuperMenuTitle:(id)fp12 target:(id)fp16 action:(SEL)fp20 keyEquivalent:(id)fp24 keyEquivalentModifierMask:(unsigned int)fp28 userObject:(id)fp32 isAction:(BOOL)fp36;
- (BOOL)addFilterMenuTitle:(id)fp8 withSuperMenuTitle:(id)fp12 target:(id)fp16 action:(SEL)fp20 keyEquivalent:(id)fp24 keyEquivalentModifierMask:(unsigned int)fp28 userObject:(id)fp32;
- (BOOL)addActionMenuTitle:(id)fp8 withSuperMenuTitle:(id)fp12 target:(id)fp16 action:(SEL)fp20 keyEquivalent:(id)fp24 keyEquivalentModifierMask:(unsigned int)fp28 userObject:(id)fp32;
- (BOOL)addPluginsMenuTitle:(id)fp8 withSuperMenuTitle:(id)fp12 target:(id)fp16 action:(SEL)fp20 keyEquivalent:(id)fp24 keyEquivalentModifierMask:(unsigned int)fp28 userObject:(id)fp32;
- (void)loadPlugins;
- (void)installPluginAtPath:(id)fp8;
- (void)loadFilters;

@end

@interface TSWindowController (TSWindowControllerFilterAdditions)
- (BOOL)checkForShapeLayer;
- (void)callFilter:(id)fp8;
- (void)filterSelected:(id)fp8;
- (void)callFilterWithName:(id)fp8;
- (void)previewUpdated:(id)fp8;
@end

@interface SubviewTableViewCell : NSCell
{
    NSView *subview;
}

- (void)addSubview:(id)fp8;
- (void)dealloc;
- (id)view;
- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface SubviewTableViewController : NSObject
{
    NSTableView *subviewTableView;
    NSTableColumn *subviewTableColumn;
    id delegate;
}

+ (id)controllerWithViewColumn:(id)fp8;
- (id)initWithViewColumn:(id)fp8;
- (void)dealloc;
- (void)setDelegate:(id)fp8;
- (id)delegate;
- (void)reloadTableView;
- (BOOL)isValidDelegateForSelector:(SEL)fp8;
- (BOOL)selectionShouldChangeInTableView:(id)fp8;
- (void)tableView:(id)fp8 didClickTableColumn:(id)fp12;
- (void)tableView:(id)fp8 didDragTableColumn:(id)fp12;
- (void)tableView:(id)fp8 mouseDownInHeaderOfTableColumn:(id)fp12;
- (BOOL)tableView:(id)fp8 shouldEditTableColumn:(id)fp12 row:(int)fp16;
- (BOOL)tableView:(id)fp8 shouldSelectRow:(int)fp12;
- (BOOL)tableView:(id)fp8 shouldSelectTableColumn:(id)fp12;
- (void)tableView:(id)fp8 willDisplayCell:(id)fp12 forTableColumn:(id)fp16 row:(int)fp20;
- (void)tableViewColumnDidMove:(id)fp8;
- (void)tableViewColumnDidResize:(id)fp8;
- (void)tableViewSelectionDidChange:(id)fp8;
- (void)tableViewSelectionIsChanging:(id)fp8;
- (int)numberOfRowsInTableView:(id)fp8;
- (BOOL)tableView:(id)fp8 acceptDrop:(id)fp12 row:(int)fp16 dropOperation:(int)fp20;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (void)tableView:(id)fp8 setObjectValue:(id)fp12 forTableColumn:(id)fp16 row:(int)fp20;
- (unsigned int)tableView:(id)fp8 validateDrop:(id)fp12 proposedRow:(int)fp16 proposedDropOperation:(int)fp20;
- (BOOL)tableView:(id)fp8 writeRows:(id)fp12 toPasteboard:(id)fp16;
- (float)tableView:(id)fp8 heightOfRow:(int)fp12;

@end

@interface TSQuestionWindowController : NSWindowController
{
    NSTextField *answerField;
    NSString *_label;
    NSString *_question;
    NSString *_answer;
}

+ (id)windowWithQuestion:(id)fp8 label:(id)fp12;
- (void)dealloc;
- (void)close;
- (void)ok:(id)fp8;
- (void)setValue:(id)fp8:(id)fp12;
- (void)cancel:(id)fp8;
- (id)label;
- (void)setLabel:(id)fp8;
- (id)question;
- (void)setQuestion:(id)fp8;
- (id)answer;
- (void)setAnswer:(id)fp8;

@end

@interface TSImageSizeController : NSWindowController
{
    NSTextField *widthField;
    NSTextField *heightField;
    NSTextField *dpiField;
    BOOL _returnCode;
    int _width;
    int _height;
    int _dpi;
}

+ (id)imageSizeControllerWithDocument:(id)fp8;
- (void)dealloc;
- (void)awakeFromNib;
- (void)setWidth:(int)fp8;
- (void)setHeight:(int)fp8;
- (void)observeValueForKeyPath:(id)fp8 ofObject:(id)fp12 change:(id)fp16 context:(void *)fp20;
- (void)close;
- (void)ok:(id)fp8;
- (void)cancel:(id)fp8;
- (BOOL)returnCode;
- (void)setReturnCode:(BOOL)fp8;
- (int)width;
- (int)height;
- (int)dpi;
- (void)setDpi:(int)fp8;

@end

@interface TSShapeImage : TSGraphic
{
    NSImage *_image;
    NSImage *_cachedImage;
    BOOL _flippedHorizontally;
    BOOL _flippedVertically;
    BOOL isScreenShot;
}

- (id)init;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (BOOL)isImage;
- (void)TS_clearCachedImage;
- (void)setImage:(id)fp8;
- (id)image;
- (id)transformedImage;
- (void)setFlippedHorizontally:(BOOL)fp8;
- (BOOL)flippedHorizontally;
- (void)setFlippedVertically:(BOOL)fp8;
- (BOOL)flippedVertically;
- (void)flipHorizontally;
- (void)flipVertically;
- (void)setBounds:(struct _NSRect)fp8;
- (BOOL)drawsStroke;
- (BOOL)canDrawStroke;
- (void)drawInView:(id)fp8 isSelected:(BOOL)fp12;
- (void)makeNaturalSize;
- (id)propertyListRepresentation;
- (void)loadPropertyListRepresentation:(id)fp8;
- (void)setImageFile:(id)fp8;
- (id)imageFile;
- (BOOL)isScreenShot;
- (void)setIsScreenShot:(BOOL)fp8;
- (BOOL)shouldKeepAspectRatioWhenShiftIsHeld;
- (BOOL)isLocked;

@end

@interface TSImage : NSObject
{
    struct CGImage *_cgImage;
}

+ (id)imageWithCGImage:(struct CGImage *)fp8;
+ (id)imageWithCGImage:(struct CGImage *)fp8 releaseImage:(BOOL)fp12;
- (void)dealloc;
- (void)setCGImage:(struct CGImage *)fp8;
- (struct CGImage *)CGImage;
- (struct _NSRect)bounds;

@end

@interface TSDocumentController : NSDocumentController
{
}

- (unsigned int)maximumRecentDocumentCount;
- (id)newDocumentWithImageData:(id)fp8;
- (void)openThisUp:(id)fp8;

@end

@interface TSAppDelegate (TestAdditions)
- (void)printContextCount;
- (void)ufda:(id)fp8;
- (void)runLeaks:(id)fp8;
@end

@interface TSBitmapLayerState : NSObject
{
    struct CGImage *_image;
    struct _NSPoint _drawDelta;
    struct CGContext *_transportContext;
}

+ (id)bitmapLayerStateWithImage:(struct CGImage *)fp8 drawDelta:(struct _NSPoint)fp12;
- (void)dealloc;
- (void)setImage:(struct CGImage *)fp8;
- (struct CGImage *)image;
- (struct _NSPoint)drawDelta;
- (void)setDrawDelta:(struct _NSPoint)fp8;
- (struct CGContext *)transportContext;
- (void)setTransportContext:(struct CGContext *)fp8;

@end

@interface TSIntroWindowController : NSWindowController
{
}

@end

@interface TSAcceleratorController : NSWindowController
{
    TSGraphicView *_view;
}

+ (id)acceleratorControllerOnView:(id)fp8;
- (id)init;
- (void)awakeFromNib;
- (id)view;
- (void)setView:(id)fp8;

@end

@interface TSAcceleratorWindow : NSPanel
{
}

- (void)awakeFromNib;

@end

@interface TSFeedbackTextView : NSTextView
{
}

- (void)insertTab:(id)fp8;

@end

@interface TSFeedbackWindowController : NSWindowController
{
    NSTextView *feedbackTextView;
    NSTextField *titleField;
    NSString *_email;
    NSString *_feedback;
    NSString *_title;
    BOOL _sendingButtonEnabled;
    BOOL _sending;
    NSURLConnection *_connection;
    NSButton *clearButton;
    NSButton *cancelButton;
    NSButton *sendButton;
}

+ (id)feedbackWindowController;
- (void)dealloc;
- (id)systemInfoString;
- (void)show;
- (void)close;
- (void)cancel:(id)fp8;
- (void)send:(id)fp8;
- (void)connectionDidFinishLoading:(id)fp8;
- (void)connection:(id)fp8 didFailWithError:(id)fp12;
- (void)textStorageDidProcessEditing:(id)fp8;
- (id)email;
- (void)setEmail:(id)fp8;
- (id)feedback;
- (void)setFeedback:(id)fp8;
- (BOOL)sendingButtonEnabled;
- (void)setSendingButtonEnabled:(BOOL)fp8;
- (BOOL)sending;
- (void)setSending:(BOOL)fp8;
- (id)title;
- (void)setTitle:(id)fp8;
- (id)connection;
- (void)setConnection:(id)fp8;
- (void)clearFeedback:(id)fp8;
- (BOOL)textView:(id)fp8 doCommandBySelector:(SEL)fp12;
- (void)flagsChanged:(id)fp8;

@end

@interface TSFontPanel : NSFontPanel
{
}

- (id)initWithContentRect:(struct _NSRect)fp8 styleMask:(unsigned int)fp24 backing:(int)fp28 defer:(BOOL)fp32;
- (void)awakeFromNib;

@end

@interface TSColorPanel : NSColorPanel
{
}

- (id)initWithContentRect:(struct _NSRect)fp8 styleMask:(unsigned int)fp24 backing:(int)fp28 defer:(BOOL)fp32;
- (void)awakeFromNib;

@end

@interface TSNewDocumentController : NSWindowController
{
    NSMutableArray *_previewImages;
    int _width;
    int _height;
    int _resolution;
    BOOL _hasImageOnPasteboard;
    NSString *_documentName;
}

+ (id)createNewDocumentWindow;
- (id)initWithWindowNibName:(id)fp8;
- (void)dealloc;
- (void)awakeFromNib;
- (void)closeDown:(id)fp8;
- (void)makeNewDocument:(id)fp8;
- (void)makeNewDocumentFromClipboard:(id)fp8;
- (void)addImageNamed:(id)fp8 withSize:(struct _NSSize)fp12;
- (void)loadImages;
- (void)updateImageOnPasteboard;
- (void)windowDidLoad;
- (BOOL)xrespondsToSelector:(SEL)fp8;
- (id)previewImages;
- (void)setPreviewImages:(id)fp8;
- (int)width;
- (void)setWidth:(int)fp8;
- (int)height;
- (void)setHeight:(int)fp8;
- (int)resolution;
- (void)setResolution:(int)fp8;
- (BOOL)hasImageOnPasteboard;
- (void)setHasImageOnPasteboard:(BOOL)fp8;
- (id)documentName;
- (void)setDocumentName:(id)fp8;

@end

@interface TSNewDocBrowserImage : NSObject
{
    NSString *_path;
    struct _NSSize _size;
    int _resolution;
}

+ (id)imageWithName:(id)fp8;
- (void)dealloc;
- (id)imageRepresentationType;
- (id)imageRepresentation;
- (id)imageUID;
- (id)imageTitle;
- (id)imageSubtitle;
- (id)path;
- (void)setPath:(id)fp8;
- (struct _NSSize)size;
- (void)setSize:(struct _NSSize)fp8;
- (int)resolution;
- (void)setResolution:(int)fp8;

@end

@interface PTHotKey : NSObject
{
    NSString *mIdentifier;
    NSString *mName;
    PTKeyCombo *mKeyCombo;
    id mTarget;
    SEL mAction;
}

- (id)init;
- (id)initWithIdentifier:(id)fp8 keyCombo:(id)fp12;
- (void)dealloc;
- (id)description;
- (void)setIdentifier:(id)fp8;
- (id)identifier;
- (void)setKeyCombo:(id)fp8;
- (id)keyCombo;
- (void)setName:(id)fp8;
- (id)name;
- (void)setTarget:(id)fp8;
- (id)target;
- (void)setAction:(SEL)fp8;
- (SEL)action;
- (void)invoke;

@end

@interface PTHotKeyCenter : NSObject
{
    NSMutableDictionary *mHotKeys;
    BOOL mEventHandlerInstalled;
}

+ (id)sharedCenter;
- (id)init;
- (void)dealloc;
- (BOOL)registerHotKey:(id)fp8;
- (void)unregisterHotKey:(id)fp8;
- (id)allHotKeys;
- (id)hotKeyWithIdentifier:(id)fp8;
- (BOOL)_hasCarbonEventSupport;
- (id)_hotKeyForCarbonHotKey:(struct OpaqueEventHotKeyRef *)fp8;
- (struct OpaqueEventHotKeyRef *)_carbonHotKeyForHotKey:(id)fp8;
- (void)_updateEventHandler;
- (void)_hotKeyDown:(id)fp8;
- (void)_hotKeyUp:(id)fp8;
- (void)sendEvent:(id)fp8;
- (long)sendCarbonEvent:(struct OpaqueEventRef *)fp8;

@end

@interface PTKeyBroadcaster : NSButton
{
}

+ (long)cocoaModifiersAsCarbonModifiers:(long)fp8;
- (void)_bcastKeyCode:(short)fp8 modifiers:(long)fp12;
- (void)_bcastEvent:(id)fp8;
- (void)keyDown:(id)fp8;
- (BOOL)performKeyEquivalent:(id)fp8;

@end

@interface PTKeyCodeTranslator : NSObject
{
    struct OpaqueKeyboardLayoutRef *keyboardLayout;
    struct UCKeyboardLayout *uchrData;
    void *KCHRData;
    int keyLayoutKind;
    unsigned int keyTranslateState;
    unsigned int deadKeyState;
}

+ (id)currentTranslator;
- (id)initWithKeyboardLayout:(struct OpaqueKeyboardLayoutRef *)fp8;
- (id)translateKeyCode:(short)fp8;
- (struct OpaqueKeyboardLayoutRef *)keyboardLayout;
- (id)description;

@end

@interface PTKeyCombo : NSObject <NSCopying>
{
    int mKeyCode;
    int mModifiers;
}

+ (id)clearKeyCombo;
+ (id)keyComboWithKeyCode:(int)fp8 modifiers:(int)fp12;
- (id)initWithKeyCode:(int)fp8 modifiers:(int)fp12;
- (id)initWithPlistRepresentation:(id)fp8;
- (id)plistRepresentation;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (BOOL)isEqual:(id)fp8;
- (int)keyCode;
- (int)modifiers;
- (BOOL)isValidHotKeyCombo;
- (BOOL)isClearCombo;

@end

@interface PTKeyCombo (UserDisplayAdditions)
+ (id)_stringForModifiers:(int)fp8;
+ (id)_keyCodesDictionary;
+ (id)_stringForKeyCode:(short)fp8 legacyKeyCodeMap:(id)fp12;
+ (id)_stringForKeyCode:(short)fp8 newKeyCodeMap:(id)fp12;
+ (id)_stringForKeyCode:(short)fp8;
- (id)description;
@end

@interface PTKeyComboPanel : NSWindowController
{
    NSTextField *mTitleField;
    NSTextField *mComboField;
    PTKeyBroadcaster *mKeyBcaster;
    NSString *mTitleFormat;
    NSString *mKeyName;
    PTKeyCombo *mKeyCombo;
}

+ (id)sharedPanel;
- (id)init;
- (void)dealloc;
- (void)windowDidLoad;
- (void)_refreshContents;
- (int)runModal;
- (void)runModalForHotKey:(id)fp8;
- (void)_sheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)runSheeetForModalWindow:(id)fp8 target:(id)fp12;
- (void)setKeyCombo:(id)fp8;
- (id)keyCombo;
- (void)setKeyBindingName:(id)fp8;
- (id)keyBindingName;
- (void)ok:(id)fp8;
- (void)cancel:(id)fp8;
- (void)clear:(id)fp8;
- (void)noteKeyBroadcast:(id)fp8;

@end

@interface FMTileImageView : NSView
{
    NSImage *_image;
    struct CGImage *_tileImageRef;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;
- (id)image;
- (void)setImage:(id)fp8;

@end

@interface TSFileBrowserWindowController : NSWindowController
{
    id _imageBrowser;
    NSMutableArray *_images;
    NSMutableArray *_importedImages;
}

- (void)dealloc;
- (id)initWithWindowNibName:(id)fp8;
- (void)windowWillClose:(id)fp8;
- (void)makeFlyShowAtPath:(id)fp8;
- (void)savePanelDidEndForSlideShow:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)makeSlideShow:(id)fp8;
- (void)awakeFromNib;
- (void)imageBrowser:(id)fp8 cellWasDoubleClickedAtIndex:(unsigned int)fp12;
- (void)updateDatasource;
- (void)addAnImageWithPath:(id)fp8;
- (void)addImagesWithPath:(id)fp8 recursive:(BOOL)fp12;
- (void)addImagesWithPaths:(id)fp8;
- (int)numberOfItemsInImageBrowser:(id)fp8;
- (id)imageBrowser:(id)fp8 itemAtIndex:(int)fp12;
- (void)imageBrowser:(id)fp8 removeItemsAtIndexes:(id)fp12;
- (BOOL)imageBrowser:(id)fp8 moveItemsAtIndexes:(id)fp12 toIndex:(unsigned int)fp16;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (id)images;
- (void)setImages:(id)fp8;
- (id)importedImages;
- (void)setImportedImages:(id)fp8;

@end

@interface TSFileBrowserImage : NSObject
{
    NSString *_path;
}

+ (id)fileBrowserImageWithImageInBundleNamed:(id)fp8;
- (void)dealloc;
- (id)imageRepresentationType;
- (id)imageRepresentation;
- (id)imageUID;
- (id)imageTitle;
- (id)imageSubtitle;
- (id)path;
- (void)setPath:(id)fp8;

@end

@interface TSViewWindow : NSPanel
{
    NSView *view;
    NSView *openerView;
    double _lastActionTime;
}

- (id)initWithContentRect:(struct _NSRect)fp8 styleMask:(unsigned int)fp24 backing:(int)fp28 defer:(BOOL)fp32;
- (BOOL)canBecomeKeyWindow;
- (BOOL)canBecomeMainWindow;
- (void)dealloc;
- (void)awakeFromNib;
- (void)appDidResignActiveNotification:(id)fp8;
- (void)packToView;
- (void)openNextToView:(id)fp8;
- (void)fadeIn:(id)fp8;
- (void)fadeOut:(id)fp8;
- (void)fadeOutOnTimer:(id)fp8;
- (void)resignMainWindow;
- (void)resignKeyWindow;

@end

@interface TSMarchingAntsFilter : CIFilter
{
    CIImage *inputImage;
    NSNumber *timeDelta;
}

+ (void)initialize;
+ (id)filterWithName:(id)fp8;
- (id)init;
- (id)inputKeys;
- (id)customAttributes;
- (id)outputImage;

@end

@interface TSConvolution3by3 : CIFilter
{
    CIImage *inputImage;
    NSNumber *r00;
    NSNumber *r01;
    NSNumber *r02;
    NSNumber *r10;
    NSNumber *r11;
    NSNumber *r12;
    NSNumber *r20;
    NSNumber *r21;
    NSNumber *r22;
}

+ (void)initialize;
+ (id)filterWithName:(id)fp8;
- (id)init;
- (id)inputKeys;
- (id)customAttributes;
- (id)outputImage;

@end

@interface TSSelectionMask : TSBitmapLayer
{
    struct CGImage *_selectionMaskCache;
    struct CGImage *_antsCache;
    struct CGImage *_maskPreview;
    struct CGContext *_featherCtx;
    struct _NSRect _antsBounds;
}

- (id)initWithSize:(struct _NSSize)fp8 view:(id)fp16;
- (void)observeValueForKeyPath:(id)fp8 ofObject:(id)fp12 change:(id)fp16 context:(void *)fp20;
- (void)didChange;
- (void)dealloc;
- (void)superdrawAntsInContext:(struct CGContext *)fp8 updateRect:(struct _NSRect)fp12;
- (void)updateAnts:(id)fp8;
- (void)otherdrawAntsInContext:(struct CGContext *)fp8 updateRect:(struct _NSRect)fp12;
- (void)drawAntsInContext:(struct CGContext *)fp8 updateRect:(struct _NSRect)fp12;
- (void)xcommitDelta;
- (void)didCommitDelta;
- (struct CGImage *)selectionMask;
- (void)invalidateMaskCache;
- (void)clipInContext:(struct CGContext *)fp8;
- (void)placeTSImage:(id)fp8 inFrame:(struct _NSRect)fp12 usingUndo:(BOOL)fp28 clipToSelection:(BOOL)fp32 clearFrame:(BOOL)fp36;
- (void)drawBackgroundInContext:(struct CGContext *)fp8 frame:(struct _NSRect)fp12;
- (struct CGContext *)createInvertedContext:(BOOL)fp8;
- (void)invertMask;
- (struct CGImage *)maskPreview;
- (void)setMaskPreview:(struct CGImage *)fp8;
- (struct CGImage *)antsCache;
- (void)setAntsCache:(struct CGImage *)fp8;
- (void)featherDidCancel;
- (id)featheredSelection:(BOOL)fp8;
- (void)updateFeather;
- (void)featherWithRadius:(float)fp8;
- (void)featherSelection:(id)fp8;

@end

@interface TSHudPalette : NSPanel
{
}

- (id)initWithContentRect:(struct _NSRect)fp8 styleMask:(unsigned int)fp24 backing:(int)fp28 defer:(BOOL)fp32;
- (BOOL)canBecomeKeyWindow;
- (BOOL)canBecomeMainWindow;
- (void)awakeFromNib;

@end

@interface TSHudTitleBar : NSView
{
}

+ (id)bezierPathWithAlmostRoundRectInRect:(struct _NSRect)fp8 radius:(float)fp24;
+ (id)flippedBezierPathWithAlmostRoundRectInRect:(struct _NSRect)fp8 radius:(float)fp24;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface TSGradientPreview : NSView
{
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)observeValueForKeyPath:(id)fp8 ofObject:(id)fp12 change:(id)fp16 context:(void *)fp20;
- (void)drawBackgroundInRect:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface TSFeatherController : NSWindowController
{
    id _caller;
}

+ (id)featherControllerWithCaller:(id)fp8;
- (void)ok:(id)fp8;
- (void)cancel:(id)fp8;
- (id)caller;
- (void)setCaller:(id)fp8;

@end

@interface TSHudBox : NSBox
{
}

- (void)drawRect:(struct _NSRect)fp8;

@end

@interface TSHudWindowResizeWidget : FMWindowResizeWidget
{
}

- (void)drawRect:(struct _NSRect)fp8;

@end

@interface TSHudScrollView : NSScrollView
{
}

- (void)setupScrollers;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;
- (void)updateForFullScreenChange:(id)fp8;
- (void)xdrawRect:(struct _NSRect)fp8;
- (BOOL)acceptsFirstResponder;

@end

@interface TSHudScroller : NSScroller
{
}

+ (void)load;
- (void)drawArrow:(int)fp8 highlightPart:(int)fp12;
- (void)drawKnob;
- (void)drawKnobSlotInRect:(struct _NSRect)fp8 highlight:(BOOL)fp24;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface NSCursor (NSCursorAdditions)
+ (id)moveCursor;
@end

@interface TSGradient : NSObject <NSCopying, NSCoding>
{
    struct _TSGradientElement *elementList;
    int blendingMode;
    struct CGFunction *gradientFunction;
}

+ (id)gradientWithBeginningColor:(id)fp8 endingColor:(id)fp12;
+ (id)aquaSelectedGradient;
+ (id)blueUnifiedDarkGradient;
+ (id)alpahAquaNormalGradient;
+ (id)aquaNormalGradient;
+ (id)aquaPressedGradient;
+ (id)unifiedSelectedGradient;
+ (id)unifiedNormalGradient;
+ (id)unifiedPressedGradient;
+ (id)unifiedDarkGradient;
+ (id)sourceListSelectedGradient;
+ (id)sourceListUnselectedGradient;
+ (id)rainbowGradient;
+ (id)hydrogenSpectrumGradient;
- (id)init;
- (void)_commonInit;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;
- (id)gradientWithAlphaComponent:(float)fp8;
- (id)gradientWithBlendingMode:(int)fp8;
- (id)addColorStop:(id)fp8 atPosition:(float)fp12;
- (id)removeColorStopAtPosition:(float)fp8;
- (id)removeColorStopAtIndex:(unsigned int)fp8;
- (int)blendingMode;
- (id)colorStopAtIndex:(unsigned int)fp8;
- (id)colorAtPosition:(float)fp8;
- (void)drawSwatchInRect:(struct _NSRect)fp8;
- (void)fillRect:(struct _NSRect)fp8 angle:(float)fp24;
- (void)fillRect:(struct _NSRect)fp8 startPoint:(struct CGPoint)fp24 endPoint:(struct CGPoint)fp32;
- (void)radialFillRect:(struct _NSRect)fp8;
- (void)setBlendingMode:(int)fp8;
- (void)addElement:(struct _TSGradientElement *)fp8;
- (struct _TSGradientElement)removeElementAtIndex:(unsigned int)fp8;
- (struct _TSGradientElement)removeElementAtPosition:(float)fp8;
- (struct _TSGradientElement *)elementAtIndex:(unsigned int)fp8;

@end

@interface TSHudLabel : NSTextField
{
}

- (void)awakeFromNib;
- (void)updateFontColor:(id)fp8;

@end

@interface TSHudDisclosureButton : NSButton
{
    NSBezierPath *_onTrianglePath;
    NSBezierPath *_offTrianglePath;
}

- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface TSStartWindowController : NSWindowController
{
}

+ (id)startWindow;
- (void)dealloc;
- (void)show;

@end

@interface TSInspectorWindow : NSPanel
{
}

- (id)initWithContentRect:(struct _NSRect)fp8 styleMask:(unsigned int)fp24 backing:(int)fp28 defer:(BOOL)fp32;
- (void)awakeFromNib;
- (BOOL)xcanBecomeMainWindow;

@end

@interface TSInspectorWindowSourceView : NSView
{
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface TSInspectorTableView : NSTableView
{
    BOOL _inMouseDown;
}

- (void)awakeFromNib;
- (BOOL)isOpaque;
- (void)dealloc;
- (void)mouseDown:(id)fp8;
- (id)menuForEvent:(id)fp8;
- (void)viewWillMoveToWindow:(id)fp8;
- (void)highlightSelectionInClipRect:(struct _NSRect)fp8;
- (void)selectRow:(int)fp8 byExtendingSelection:(BOOL)fp12;
- (void)deselectRow:(int)fp8;
- (id)_highlightColorForCell:(id)fp8;
- (BOOL)acceptsFirstResponder;
- (void)textDidEndEditing:(id)fp8;

@end

@interface VPTabViewAnimation : NSAnimation
{
}

- (void)setCurrentProgress:(float)fp8;

@end

@interface TSAnimatingTabView : NSTabView
{
    int transitionStyle;
    CIFilter *transitionFilter;
    CIImage *inputShadingImage;
    CIImage *inputMaskImage;
    struct _NSRect imageRect;
    NSAnimation *animation;
    BOOL slowMotionDemo;
}

- (void)initAddedProperties;
- (void)awakeFromNib;
- (int)transitionStyle;
- (void)setTransitionStyle:(int)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)createTransitionFilterForRect:(struct _NSRect)fp8 initialCIImage:(id)fp24 finalCIImage:(id)fp28;
- (void)selectTabViewItem:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;

@end

@interface TSFontPopUpButton : NSPopUpButton
{
}

- (void)drawRect:(struct _NSRect)fp8;

@end

@interface TSLayerTableTextCell : NSTextFieldCell
{
}

- (void)awakeFromNib;
- (void)textViewDidChangeSelection:(id)fp8;
- (void)endEditing:(id)fp8;
- (id)setUpFieldEditorAttributes:(id)fp8;

@end

@interface TSGraphicView (TSGraphicViewCropAdditions)
- (void)beginExpandingCropRectSelectionWithEvent:(id)fp8 usingEdge:(int)fp12;
- (void)beginMovingCropWithEvent:(id)fp8;
- (struct _NSRect)cropKnobRectForPoint:(struct _NSPoint)fp8;
- (int)cropKnobForPoint:(struct _NSPoint)fp8;
- (int)resizeByMovingCropKnob:(int)fp8 toPoint:(struct _NSPoint)fp12 withEvent:(id)fp20;
- (void)makeCropSelectionWithEvent:(id)fp8;
- (void)drawCropGraphics;
@end

@interface TSFloodAlias : CIFilter
{
    CIImage *inputImage;
}

+ (void)initialize;
+ (id)filterWithName:(id)fp8;
- (id)init;
- (id)inputKeys;
- (id)customAttributes;
- (id)outputImage;

@end

@interface FMIntegerTransformer : NSValueTransformer
{
}

+ (BOOL)allowsReverseTransform;
+ (Class)transformedValueClass;
- (id)transformedValue:(id)fp8;
- (id)reverseTransformedValue:(id)fp8;

@end

@interface BDAlias : NSObject
{
    struct AliasRecord **_alias;
}

+ (id)aliasWithAliasHandle:(struct AliasRecord **)fp8;
+ (id)aliasWithData:(id)fp8;
+ (id)aliasWithPath:(id)fp8;
+ (id)aliasWithPath:(id)fp8 relativeToPath:(id)fp12;
+ (id)aliasWithFSRef:(struct FSRef *)fp8;
+ (id)aliasWithFSRef:(struct FSRef *)fp8 relativeToFSRef:(struct FSRef *)fp12;
- (id)initWithAliasHandle:(struct AliasRecord **)fp8;
- (id)initWithData:(id)fp8;
- (id)initWithPath:(id)fp8;
- (id)initWithPath:(id)fp8 relativeToPath:(id)fp12;
- (id)initWithFSRef:(struct FSRef *)fp8;
- (id)initWithFSRef:(struct FSRef *)fp8 relativeToFSRef:(struct FSRef *)fp12;
- (void)dealloc;
- (struct AliasRecord **)alias;
- (void)setAlias:(struct AliasRecord **)fp8;
- (id)aliasData;
- (void)setAliasData:(id)fp8;
- (id)fullPath;
- (id)fullPathRelativeToPath:(id)fp8;

@end

@interface FMCloseEnoughSliderTransformer : NSValueTransformer
{
}

+ (BOOL)allowsReverseTransform;
+ (Class)transformedValueClass;
- (id)reverseTransformedValue:(id)fp8;

@end

@interface TSBrushSizeSlider : NSSlider
{
    BOOL _mouseIsDown;
    BOOL _cursorPushed;
    NSCursor *_previousCursor;
}

- (void)updateIcon;
- (void)mouseDown:(id)fp8;
- (BOOL)sendAction:(SEL)fp8 to:(id)fp12;

@end

@interface TSImageSplashController : NSWindowController
{
    TSOpenGLImageView *glView;
    NSString *theImagePath;
}

+ (void)showSplashWithImageAtPath:(id)fp8;
- (void)awakeFromNib;
- (id)theImagePath;
- (void)setTheImagePath:(id)fp8;

@end

@interface TSOpenGLImageView : NSOpenGLView
{
    BOOL hasCalledInitGL;
    TSGLImage *glImage;
    BOOL closingDown;
    BOOL openGLIsDead;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (void)initGL;
- (void)drawRect:(struct _NSRect)fp8;
- (void)animationTimerDidEnd:(id)fp8;
- (void)animationTimer:(id)fp8 didReachProgressMark:(float)fp12;
- (void)show:(id)fp8;
- (id)image;
- (void)setImage:(id)fp8;
- (void)loadImageAtPath:(id)fp8;
- (BOOL)openGLIsDead;
- (void)setOpenGLIsDead:(BOOL)fp8;
- (void)dealloc;

@end

@interface TSGLImage : NSObject
{
    NSBitmapImageRep *bitmap;
    struct {
        float;
        float;
        float;
    } *glQuad;
    float scaleX;
    float scaleY;
    unsigned int txID;
    BOOL ready;
    float alpha;
}

- (id)init;
- (id)bmpImage;
- (void)genQuad;
- (void)drawTexture;
- (void)initGL;
- (void)loadTextureFromFile:(id)fp8;
- (void)discardData;
- (void)dealloc;
- (float)alpha;
- (void)setAlpha:(float)fp8;
- (float)imageWidth;
- (float)imageHeight;

@end

@interface TSGraphicView (TSGraphicViewRotateAdditions)
- (void)drawRotatePreview;
- (void)setPreviewRotation:(float)fp8;
- (void)finalizeRotate;
- (id)rotatePreview;
- (void)setRotatePreview:(id)fp8;
- (id)preRotateImage;
- (void)setPreRotateImage:(id)fp8;
@end

